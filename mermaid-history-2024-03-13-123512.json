[{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - id : int\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n    + setAsFirstPlayer() void\n    + endTurn() void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ int ~\n    - currentPlayer : int\n    - firstPlayer : int\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n    + endTurn() void\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n    + endTurn() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":89.7045074287808,"y":-803.4007142776135},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710259168554,"type":"auto","id":"b00ec8fa-5265-4f04-ae60-75cbb7cc23ae","name":"black-angle"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - id : int\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n    + setAsFirstPlayer() void\n    + endTurn() void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ int ~\n    - currentPlayer : int\n    - firstPlayer : int\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n    + endTurn() void\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n    + endTurn() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-402.29555818305147,"y":-941.4007077567549},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710258988549,"type":"auto","id":"d9084970-0b2d-4086-ba94-9d73139337df","name":"shaggy-flag"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - id : int\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n    + setAsFirstPlayer() void\n    + endTurn() void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ int ~\n    - currentPlayer : int\n    - firstPlayer : int\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n    + endTurn() void\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n    + endTurn() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-749.2952857846515,"y":-18.4006487586326},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710258808555,"type":"auto","id":"71f1faa9-24b7-441c-8d99-5a2971355790","name":"yummy-pharmacist"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - id : int\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n    + setAsFirstPlayer() void\n    + endTurn() void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ int ~\n    - currentPlayer : int\n    - firstPlayer : int\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n    + endTurn() void\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n    + endTurn() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-646.2950685013918,"y":-293.40071510355267},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710258748547,"type":"auto","id":"9e360eb5-b857-4b49-9789-3ab860930410","name":"full-fish"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - id : int\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n    + setAsFirstPlayer() void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ int ~\n    - currentPlayer : int\n    - firstPlayer : int\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-646.2950685013918,"y":-293.40071510355267},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710258688561,"type":"auto","id":"05df7052-607d-4107-ad49-2545aad368e7","name":"beefy-battery"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - id : int\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n    + setAsFirstPlayer() void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ int ~\n    - currentPlayer : int\n    - firstPlayer : int\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-651.2949547216538,"y":-240.40068939838136},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710258628556,"type":"auto","id":"e96bb536-b412-46f1-b546-0271f4e572b4","name":"refined-twilight"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - id : int\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n    + setAsFirstPlayer() void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ int ~\n    - currentPlayer : int\n    - firstPlayer : int\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-691.2949457791601,"y":-20.400688510129584},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710258568549,"type":"auto","id":"432a1541-d1c4-4457-88fa-f4b8dcbaa311","name":"scarce-helicopter"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - id : int\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n    + setAsFirstPlayer() void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n    - currentPlayer : int\n    - firstPlayer : int\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-709.2951170069234,"y":-32.40068582738152},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710258508558,"type":"auto","id":"eecc57c7-847c-4699-b23a-e2d203514694","name":"handsome-dawn"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n    + setAsFirstPlayer() void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n    - currentPlayer : String\n    - firstPlayer : String\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-709.2951170069234,"y":-32.40068582738152},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710258448548,"type":"auto","id":"864464f3-a279-4c68-9cc9-48e935c8b530","name":"enough-yak"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n    + setAsFirstPlayer() void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n    - currentPlayer : String\n    \n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-709.2951170069234,"y":-32.40068582738152},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710258388549,"type":"auto","id":"5fd320c4-7755-4929-b48d-026678b6318b","name":"victorious-shoe"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n    + setAsFirstPlayer() void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n    - currentPlayer : \n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-709.2951170069234,"y":-32.40068582738152},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710258328548,"type":"auto","id":"12c9a014-40ba-4601-813c-8d0069648f21","name":"abandoned-translator"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n    + setAsFirstPlayer() void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-709.2951170069234,"y":-32.40068582738152},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710258088555,"type":"auto","id":"0dab9e3d-56be-4e70-adf6-1f4200bfbaca","name":"fat-alarm"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n    + setAsFirstPlayer() void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-704.2951112118143,"y":48.59931007674612},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710257968554,"type":"auto","id":"2e4dd2cf-23d6-41a4-8418-19ff155d5aa5","name":"annoyed-dog"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n    + setAsFirst\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n    + chooseFirstPlayer() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-803.2949659983782,"y":37.599273970845644},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710257908548,"type":"auto","id":"670c5a7f-5e3d-4af5-b8fb-7e595b0f037d","name":"aggressive-pillow"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-803.2949659983782,"y":37.599273970845644},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710257848547,"type":"auto","id":"7ccc45e3-1ba0-409a-9819-f9661722f2fe","name":"acoustic-gold"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-693.294838505977,"y":-179.4007042336309},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710257728548,"type":"auto","id":"03886c8c-c43b-4722-b73f-1e729df6e2ec","name":"billowy-judge"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-734.2948653992108,"y":-22.400718220484762},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710257668553,"type":"auto","id":"e722dd95-70fb-48c0-b448-392aaafb1965","name":"wailing-daybreak"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToken(nickname : String, token : int)\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-605.2949015253454,"y":6.599336017809399},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710257608561,"type":"auto","id":"c850f62d-e15e-4c21-8869-726108bd4e2c","name":"bad-window"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + setToke\n    + placeStarterCard(nickname : String) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-605.2949015253454,"y":6.599336017809399},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710257548550,"type":"auto","id":"3b3b863f-7068-4860-8670-2826a907d4c7","name":"rough-raincoat"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard(nickname) void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-447.2950256121375,"y":68.59932443294267},"zoom":2.2450034618377686,"editorMode":"code"},"time":1710257488550,"type":"auto","id":"da0c1a0b-86c7-4f20-9fad-f15866ab1798","name":"embarrassed-vegetable"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-809.2950380635398,"y":0.5992889788547302},"zoom":2.2450035187010107,"editorMode":"code"},"time":1710257308551,"type":"auto","id":"fe227b97-41bb-4f46-80ea-8903c3952844","name":"straight-agency"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-728.2951440224008,"y":132.59929467600625},"zoom":2.2450035187010107,"editorMode":"code"},"time":1710257188548,"type":"auto","id":"6635ba7b-cf76-4838-8a86-fca578825ad8","name":"tight-school"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- PlaceableCard\nCard <|-- ObjectiveCard\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-31.295153597265198,"y":-78.40075567465702},"zoom":2.2450035187010107,"editorMode":"code"},"time":1710257128551,"type":"auto","id":"5dbae46c-63f8-42e6-9a20-d0ac074eebef","name":"ancient-country"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n}\n\nclass PlaceableCard{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-15.144692347810336,"y":87.65631990466127},"zoom":2.1886048316955566,"editorMode":"code"},"time":1710257068547,"type":"auto","id":"6a0754ac-5360-471e-80f5-24ec2d6b9438","name":"appetizing-student"},{"state":{"code":"classDiagram\n\nclass PlcableCard{\n    - id : int\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-15.144692347810336,"y":87.65631990466127},"zoom":2.1886048316955566,"editorMode":"code"},"time":1710257008548,"type":"auto","id":"a4784684-f17a-4c63-a186-1b3013a2f850","name":"attractive-cpu"},{"state":{"code":"classDiagram\n\nclass PlaceableCard{\n    - id : int\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard <|-- StarterCard\nPlaceableCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-15.144692347810336,"y":87.65631990466127},"zoom":2.1886048316955566,"editorMode":"code"},"time":1710256948557,"type":"auto","id":"8d9bc9d8-4700-456c-b3ce-78727b5b6df9","name":"slow-action"},{"state":{"code":"classDiagram\n\nclass PlacableCard{\n    - id : int\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-15.144692347810336,"y":87.65631990466127},"zoom":2.1886048316955566,"editorMode":"code"},"time":1710256888561,"type":"auto","id":"e6666be4-8173-4039-aad8-a4c62dc52544","name":"brief-painter"},{"state":{"code":"classDiagram\n\nclass Card{\n    - id : int\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-15.144692347810336,"y":87.65631990466127},"zoom":2.1886048316955566,"editorMode":"code"},"time":1710256828549,"type":"auto","id":"6ecc8006-dadf-4192-95b5-7e101ee01ada","name":"zealous-coffeeshop"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-1098.1447491549561,"y":-42.34368243415398},"zoom":2.1886048505206426,"editorMode":"code"},"time":1710256768551,"type":"auto","id":"da2e2ac7-9e76-43e5-965d-52d59773505c","name":"scary-hospital"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-965.1446178077979,"y":-5.3437570849950475},"zoom":2.1886048505206426,"editorMode":"code"},"time":1710256588553,"type":"auto","id":"d224a3dc-825f-4a7a-bbd2-d09b31c5f363","name":"deafening-ability"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<Togliere>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-1152.024164038629,"y":-244.98314468133773},"zoom":2.461213827133179,"editorMode":"code"},"time":1710256528561,"type":"auto","id":"e17afb33-0e86-482f-ad48-e02b4eaa6301","name":"whining-egg"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    <<>>\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-1115.0239819234646,"y":-33.983127818191804},"zoom":2.461213827133179,"editorMode":"code"},"time":1710256468694,"type":"auto","id":"6c4bac6a-8b8b-40bf-baf7-48e0b2b4aad7","name":"shy-area"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-1115.0239819234646,"y":-33.983127818191804},"zoom":2.4612137518297885,"editorMode":"code"},"time":1710256408562,"type":"auto","id":"d025091e-6a28-4bcf-aa18-8ce2243d47ac","name":"tasty-state"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~ Integer, Card ~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-.->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-1050.4051414655787,"y":-65.91369549348006},"zoom":2.281473398208618,"editorMode":"code"},"time":1710256348548,"type":"auto","id":"57ea3b79-2dba-45c1-a8ad-3ee69f911cf2","name":"brown-accountant"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    - CardIDMap : Map ~~\n\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-1050.4051414655787,"y":-65.91369549348006},"zoom":2.281473398208618,"editorMode":"code"},"time":1710256288560,"type":"auto","id":"5e04e141-e639-444a-a732-783012f2293f","name":"apprehensive-printer"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n    - \n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-919.4051796532864,"y":-233.91368416067314},"zoom":2.281473398208618,"editorMode":"code"},"time":1710256228556,"type":"auto","id":"69f58121-4501-4907-b9f3-703b78ac7ab8","name":"panicky-parrot"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n    - \n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-960.405182757705,"y":-112.91360133546092},"zoom":2.281473398208618,"editorMode":"code"},"time":1710256168552,"type":"auto","id":"52499856-4ec0-47fb-8b5c-43b77f0cecc1","name":"bewildered-afternoon"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-1015.4048561885769,"y":-13.91354197438475},"zoom":2.281473398208618,"editorMode":"code"},"time":1710256108562,"type":"auto","id":"f61563d3-59bf-4740-9a8a-504a66f2acde","name":"slimy-terabyte"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-1015.4048561885769,"y":27.086461130034024},"zoom":2.281473398208618,"editorMode":"code"},"time":1710255808557,"type":"auto","id":"bac71415-9b42-4525-a7b3-8f3782f47f1c","name":"careful-waiter"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-1179.404868606252,"y":-176.91356032968034},"zoom":2.281473398208618,"editorMode":"code"},"time":1710255748556,"type":"auto","id":"8b28a09b-16c1-493f-aeff-0a7f50b32722","name":"warm-belgium"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-999.4049511905049,"y":-196.9135032139851},"zoom":2.281473379206366,"editorMode":"code"},"time":1710255688560,"type":"auto","id":"7473fdb2-76fd-4e46-8e22-985ff2c50276","name":"beautiful-balloon"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-258.4441052327186,"y":23.882884428504273},"zoom":1.4458670796460042,"editorMode":"code"},"time":1710255568547,"type":"auto","id":"7deaab81-e260-4bf8-a519-96dafb31f4c1","name":"handsome-bed"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-46.44406068151352,"y":-55.117141017309066},"zoom":1.4458670796460042,"editorMode":"code"},"time":1710255508558,"type":"auto","id":"78d156a2-8340-40dc-a6f8-d4a4373a9e34","name":"weak-artist"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-636.4439046024982,"y":40.882938855070535},"zoom":1.4458670796460042,"editorMode":"code"},"time":1710255448542,"type":"auto","id":"4240be94-728c-44f1-b073-0afe57b1c1a2","name":"unkempt-intern"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-390.8478931967482,"y":59.784043059119206},"zoom":1.2136612925365275,"editorMode":"code"},"time":1710255328549,"type":"auto","id":"ccf6bfd3-d442-4e51-806d-da78bcb4776d","name":"appalling-scientist"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-462.43462927694145,"y":87.74230525000753},"zoom":1.2578724033340585,"editorMode":"code"},"time":1710255268553,"type":"auto","id":"e465e3dc-207a-450a-835b-6d664ffcdaa1","name":"clever-notebook"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-478.4346025132249,"y":92.74229688634611},"zoom":1.2578724033340585,"editorMode":"code"},"time":1710255148550,"type":"auto","id":"5937bd4f-f870-4af9-89ec-e36d2fe16f14","name":"abnormal-terabyte"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-1138.305519967255,"y":-133.73041235263008},"zoom":1.995394986357801,"editorMode":"code"},"time":1710254668562,"type":"auto","id":"a34ef893-258c-46be-b869-88bc7a130973","name":"sharp-portugal"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-3.5774642886890575,"y":-0.9220764694909604},"zoom":1.737632393836975,"editorMode":"code"},"time":1710254548554,"type":"auto","id":"c0348da7-3034-4f1d-9a42-e691bf67fd2d","name":"muscular-agent"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-276.577351094076,"y":60.0779497389987},"zoom":1.737632393836975,"editorMode":"code"},"time":1710254488549,"type":"auto","id":"ddb6b092-f3bf-483c-8268-901b86a7d44e","name":"billowy-printer"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-238.57742634715234,"y":-595.9220458269909},"zoom":1.737632393836975,"editorMode":"code"},"time":1710254428561,"type":"auto","id":"7a95c205-10bf-4047-88d7-044b45c25b48","name":"enough-egypt"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - nickname : String\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":115.4226657210024,"y":-134.9220297645399},"zoom":1.737632393836975,"editorMode":"code"},"time":1710254368550,"type":"auto","id":"b8d9cfb9-2fae-4d19-b2e3-879cd928942b","name":"puny-activity"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-439.5772506652669,"y":-143.92203170742346},"zoom":1.7376323397630558,"editorMode":"code"},"time":1710254188552,"type":"auto","id":"e2937263-1fc5-4222-88d3-eda305fd663c","name":"raspy-egg"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-174.57732167327583,"y":-256.9220317208333},"zoom":1.7376323397630558,"editorMode":"code"},"time":1710253348550,"type":"auto","id":"6cea1012-9ef5-44da-8cf3-d29c54dc0435","name":"fierce-jackal"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-48.577298393939735,"y":39.07792386270347},"zoom":1.7376323397630558,"editorMode":"code"},"time":1710253288549,"type":"auto","id":"fae693d9-6bfd-44a6-a97c-f6cc25ae0e9b","name":"delightful-helicopter"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-9.577369428768378,"y":227.07791817277663},"zoom":1.7376323397630558,"editorMode":"code"},"time":1710253228559,"type":"auto","id":"59681cf4-9e85-4158-9494-86f1d8f7d562","name":"melodic-telephone"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-117.56264398422428,"y":-434.71548092734355},"zoom":1.5037888678280662,"editorMode":"code"},"time":1710253168554,"type":"auto","id":"702f7add-3a8c-4280-8d0b-b87d44db7d7c","name":"obnoxious-diamond"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-1516.645474765748,"y":-758.9926565109171},"zoom":3.62725611479344,"editorMode":"code"},"time":1710252328558,"type":"auto","id":"7ab9019b-256f-418e-a90c-b491d64fc08c","name":"yellow-diamond"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-61.53697868886828,"y":59.02591069035091},"zoom":1.1722549486686638,"editorMode":"code"},"time":1710252268557,"type":"auto","id":"a3212798-93cf-4266-ab45-862c0f262b6c","name":"rancid-gpu"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-51.53693523575211,"y":-50.974076411090095},"zoom":1.1722549486686638,"editorMode":"code"},"time":1710252208548,"type":"auto","id":"decc1d4e-40a5-4d62-a6d4-a6a02938cad3","name":"bashful-sweden"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - numOfResourcesArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-552.8279852402427,"y":-682.9812761402181},"zoom":1.7719024419784546,"editorMode":"code"},"time":1710252148550,"type":"auto","id":"889e1536-06b6-4c93-98fd-4cb42fa52b20","name":"ripe-hair"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-125.41230655693376,"y":-94.40928750987594},"zoom":1.2788382768630981,"editorMode":"code"},"time":1710252088561,"type":"auto","id":"fb550f65-5ac0-423b-b943-c1159e22dcf5","name":"tangy-continent"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-121.41232267015668,"y":-244.40930515205815},"zoom":1.278838294313255,"editorMode":"code"},"time":1710252028548,"type":"auto","id":"6f6a8053-fcd9-4800-a67d-ad34d7fdb952","name":"fast-ability"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-237.3767979007393,"y":-237.10430778725168},"zoom":1.6154350719735053,"editorMode":"code"},"time":1710251968550,"type":"auto","id":"260a0830-a03c-4310-9c5b-f46fdb0ac915","name":"handsome-journalist"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" CardElementType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":62.53225468571032,"y":-86.8556093850762},"zoom":2.0414092540740967,"editorMode":"code"},"time":1710251908547,"type":"auto","id":"1d79b9c8-bdf4-4b99-ab04-913d0a009f95","name":"vast-russia"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" CardElementType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() CardElementType\n}\n\nclass ResourceCorner{\n    - resource : CardElementType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":156.5321362368073,"y":-469.8555055896187},"zoom":2.0414092540740967,"editorMode":"code"},"time":1710251848549,"type":"auto","id":"3690d0e9-cffe-40af-83cd-de25eaef364b","name":"petite-fall"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass CardElementType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n    QUILL = 4\n    INKWELL = 5\n    MANUSCRIPT = 6\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":156.5321362368073,"y":-469.8555055896187},"zoom":2.0414092540740967,"editorMode":"code"},"time":1710251788559,"type":"auto","id":"c75851d0-a4fd-4bf9-bbf0-afe345d25f6e","name":"refined-raincoat"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":128.53215153634775,"y":-481.8554695855226},"zoom":2.041409187866709,"editorMode":"code"},"time":1710251728550,"type":"auto","id":"97b01b46-04ac-481a-ad01-b8343c99c5fa","name":"jealous-author"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":43.11835714347427,"y":-413.6972870139317},"zoom":1.7667718927061722,"editorMode":"code"},"time":1710251668547,"type":"auto","id":"55b651ac-06a1-493b-bfc0-ed7d4c31e1f5","name":"astonishing-eventide"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":63.81920065721108,"y":-619.928746443651},"zoom":1.9066263696928447,"editorMode":"code"},"time":1710251608560,"type":"auto","id":"cebd9077-a3ce-492f-baf5-eafa67944734","name":"nutty-france"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":54.26654268122246,"y":-628.2209298266182},"zoom":1.9241361618041992,"editorMode":"code"},"time":1710251548547,"type":"auto","id":"8fb7ec5d-83a0-4e2b-b3f8-22faaee5b0f6","name":"howling-helmet"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-404.733350723117,"y":-341.2209634222773},"zoom":1.9241361618041992,"editorMode":"code"},"time":1710251188549,"type":"auto","id":"147c8170-fdd3-4711-aca1-e06e62d7d9c5","name":"magnificent-uganda"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-118.73329092968693,"y":-337.22097937651466},"zoom":1.9241361618041992,"editorMode":"code"},"time":1710251128551,"type":"auto","id":"11196fbc-6e7c-4a56-a13d-7a1625e26f4d","name":"bored-garden"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-73.73330438530174,"y":-328.22095141602745},"zoom":1.9241361618041992,"editorMode":"code"},"time":1710250888549,"type":"auto","id":"a1a3a3c9-ad72-4339-8d04-97ddb0b7cd3c","name":"full-holiday"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - priority\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-73.73330438530174,"y":-328.22095141602745},"zoom":1.924136161804199,"editorMode":"code"},"time":1710250828558,"type":"auto","id":"34194333-6898-42f9-a50b-5673ea01a0d4","name":"scary-hair"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":22.26677192743341,"y":-763.2209057555094},"zoom":1.9241361852968668,"editorMode":"code"},"time":1710250768560,"type":"auto","id":"3bc7f07f-ebd2-43fa-9799-08d7dad9d8bf","name":"deafening-lock"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-349.7333551586803,"y":-521.2209101138471},"zoom":1.9241361852968668,"editorMode":"code"},"time":1710250708553,"type":"auto","id":"c5b5762f-828e-44c7-9512-30421bdd0bf8","name":"wooden-dream"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-234.88596698262145,"y":-493.33643912494125},"zoom":1.7049749353678254,"editorMode":"code"},"time":1710250648554,"type":"auto","id":"810d37fb-1bc8-4725-bb92-cebea2efb90e","name":"repulsive-match"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-7.7705005562385026,"y":-641.3311003935489},"zoom":2.0623301466058903,"editorMode":"code"},"time":1710250588560,"type":"auto","id":"36025289-dc65-42ba-8735-7d3fa284dcc0","name":"microscopic-lifeguard"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":70.22944937465651,"y":-903.3310858057635},"zoom":2.0623301466058903,"editorMode":"code"},"time":1710250528828,"type":"auto","id":"36c2c500-2f88-49dd-b750-3b39d4ca4a13","name":"cool-queen"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-317.7706299349993,"y":-899.3311254475955},"zoom":2.0623301466058903,"editorMode":"code"},"time":1710250468551,"type":"auto","id":"9cb6ecc6-ab59-4c6e-9782-c4d1fb5bc153","name":"early-accountant"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-12.770760838213363,"y":-204.33109358398147},"zoom":2.0623301466058903,"editorMode":"code"},"time":1710250408552,"type":"auto","id":"183cd38f-bddc-4ab5-b014-f5f5fcdf4d9d","name":"happy-island"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-945.770809408857,"y":-153.33095352928714},"zoom":2.0623301466058903,"editorMode":"code"},"time":1710250168557,"type":"auto","id":"901c5230-0580-4842-a0ee-347a2926cc54","name":"petite-bit"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-891.7708281831469,"y":-59.330955609543366},"zoom":2.0623301466058903,"editorMode":"code"},"time":1710250048556,"type":"auto","id":"5420069f-6dd5-4ffb-9519-54bb85fef041","name":"helpless-kitchen"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-977.770698830378,"y":-239.33097909365068},"zoom":2.0623301466058903,"editorMode":"code"},"time":1710249988651,"type":"auto","id":"7661a743-cc8e-427a-beee-96fd70c83680","name":"wailing-barista"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-374.3491918197363,"y":-610.5515447634098},"zoom":2.1127757494561283,"editorMode":"code"},"time":1710249928547,"type":"auto","id":"7882c0e0-a20d-45a6-9445-035ecedf1524","name":"lazy-keyboard"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-255.34916779754545,"y":-77.55151340956779},"zoom":2.1127757494561283,"editorMode":"code"},"time":1710249868550,"type":"auto","id":"d252eb81-cda9-4c70-b89c-fc67c2537e42","name":"some-photographer"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":18.28752084706963,"y":-274.9171984799957},"zoom":2.556458504465112,"editorMode":"code"},"time":1710249808547,"type":"auto","id":"b0e7cdda-ca9e-48a0-860e-157f7f834afe","name":"squeaking-lunch"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-703.6484704088214,"y":11.591590521587335},"zoom":2.0379718906061686,"editorMode":"code"},"time":1710249568553,"type":"auto","id":"a0fc119e-297e-43cb-b56b-07055c59510f","name":"quiet-apartment"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-142.64866888375332,"y":-79.4084336340801},"zoom":2.0379718906061686,"editorMode":"code"},"time":1710249508555,"type":"auto","id":"5caa8e47-fd80-4e1e-8521-b09ff03c65f0","name":"scrawny-coffeeshop"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-230.64871579498777,"y":-391.4083633661106},"zoom":2.0379718906061686,"editorMode":"code"},"time":1710249448545,"type":"auto","id":"b8f58f80-f698-4e8e-b63b-fdf472b7c957","name":"drab-apartment"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-123.94958172791291,"y":-316.1015589163237},"zoom":1.4962971798360658,"editorMode":"code"},"time":1710249388556,"type":"auto","id":"160d49c5-1682-4819-a2ee-5e328f58aab8","name":"lively-lawyer"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-702.5486180853995,"y":11.119782783974346},"zoom":2.035005532234443,"editorMode":"code"},"time":1710249328550,"type":"auto","id":"c5914e3e-3a60-4bd5-b2ec-f41b597ffbd2","name":"full-angle"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-942.9776359036483,"y":83.35005979110566},"zoom":2.38635829948729,"editorMode":"code"},"time":1710249268554,"type":"auto","id":"c31b192d-50f3-4d0d-98f6-d44dbd7e716e","name":"raspy-england"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":51.277203049222614,"y":122.45747103964823},"zoom":0.8872784755630123,"editorMode":"code"},"time":1710249208549,"type":"auto","id":"fca860c5-46a9-4cd1-9078-15d6e447a8a1","name":"chubby-book"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":77.3226704418573,"y":122.22851330451516},"zoom":0.7597367902409504,"editorMode":"code"},"time":1710246388560,"type":"auto","id":"b3325bfc-c6f6-439e-ae8b-ef95a2414d7f","name":"belligerent-match"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner : int\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":138.97804336874083,"y":-423.54920257384447},"zoom":1.913094162940979,"editorMode":"code"},"time":1710244828826,"type":"auto","id":"62c84d43-37a4-4a18-8cb6-98e5fb892951","name":"beautiful-advertisement"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    - coveredCorner\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-363.0219420604118,"y":-740.5491285096986},"zoom":1.913094162940979,"editorMode":"code"},"time":1710241015009,"type":"auto","id":"b30a519e-23b6-4e69-8626-74d282dd99f3","name":"acrid-man"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-28.021954460872294,"y":-153.54915625526962},"zoom":1.913094162940979,"editorMode":"code"},"time":1710240955020,"type":"auto","id":"d557d570-6685-4f2d-8c1b-e29996570e13","name":"slimy-vulture"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()    \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n    \n    + evaluatePoints() int\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":30.97803517821332,"y":38.45084682022106},"zoom":1.913094162940979,"editorMode":"code"},"time":1710240895012,"type":"auto","id":"6ad107ea-3ea8-43f4-8ce9-199efa066d1a","name":"juicy-oil"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n    + getPoints()\n        \n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":30.97803517821332,"y":38.45084682022106},"zoom":1.913094162940979,"editorMode":"code"},"time":1710240835011,"type":"auto","id":"988caed2-3b37-413e-952b-49a8e5be4526","name":"gigantic-policeman"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":63.97807988390292,"y":3.4508181994640523},"zoom":1.913094195885724,"editorMode":"code"},"time":1710240775012,"type":"auto","id":"8c3bc2a5-85e9-4f82-9029-5c9c04c54286","name":"cold-student"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-438.021914190021,"y":-509.54929414538236},"zoom":1.913094195885724,"editorMode":"code"},"time":1710240715011,"type":"auto","id":"cebeee57-9754-41cc-8260-0b524a73310d","name":"poor-author"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-62.02194045560139,"y":3.4506889881814686},"zoom":1.913094195885724,"editorMode":"code"},"time":1710240655015,"type":"auto","id":"9087757e-30cc-40ac-9de2-45e97206a8af","name":"easy-lizard"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":25.978230444083948,"y":0.45068727332386516},"zoom":1.913094195885724,"editorMode":"code"},"time":1710240595010,"type":"auto","id":"bbaf9956-5ea0-4bdb-844e-3d53ec9ce195","name":"alert-architect"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-137.0218024312447,"y":-239.54934654625455},"zoom":1.913094195885724,"editorMode":"code"},"time":1710240535011,"type":"auto","id":"c8159f33-b06e-437c-88b5-dc645d871817","name":"broken-planet"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":80.92805471387771,"y":-76.78415936564107},"zoom":1.9140629905318463,"editorMode":"code"},"time":1710240475021,"type":"auto","id":"edc0910e-ce33-47d7-a2e0-c81b030a86ee","name":"better-grass"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-110.9291398009095,"y":-223.0625554875437},"zoom":2.105469226837158,"editorMode":"code"},"time":1710240415008,"type":"auto","id":"9a09d7ad-fbae-4d66-bcba-a0573e2d1df4","name":"adamant-plastic"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace(reqRes : int[], avRes : int[]) bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-319.92908248002595,"y":-424.06250621223313},"zoom":2.105469226837158,"editorMode":"code"},"time":1710240355010,"type":"auto","id":"56ec5c91-cf04-4b3c-b9d2-004207322c30","name":"poor-window"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace() bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-154.9290528889432,"y":-469.062542723405},"zoom":2.1054693434059053,"editorMode":"code"},"time":1710240295024,"type":"auto","id":"b0e94a55-2e64-4504-b024-63df3c0c15a2","name":"gentle-pizza"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace() bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-11.928943483837912,"y":-121.06246104618971},"zoom":2.1054693434059053,"editorMode":"code"},"time":1710240235019,"type":"auto","id":"ce1bdd86-83fb-4202-bce7-a19d6271d785","name":"bashful-city"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: int[]\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace() bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-72.94539217163906,"y":-426.4746644325157},"zoom":1.9468940496444702,"editorMode":"code"},"time":1710240175011,"type":"auto","id":"2f51722a-78de-496d-a225-337fc8aa3cd0","name":"narrow-author"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: List ~ ResourceType ~\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace() bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-106.94535871061491,"y":-388.4746461384949},"zoom":1.9468940496444702,"editorMode":"code"},"time":1710240115010,"type":"auto","id":"d7b20be3-67cd-40e7-bf1d-8b1635cb4aad","name":"puny-needle"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: List ~ ResourceType ~\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    <<abstract>>\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace() bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-87.94540216126074,"y":-92.47465589407477},"zoom":1.9468940496444702,"editorMode":"code"},"time":1710240055011,"type":"auto","id":"35b2d4db-251d-432b-97f3-5a0691aa647a","name":"wet-bed"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: List ~ ResourceType ~\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace() bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-16.94529877288482,"y":-187.47459643381427},"zoom":1.9468940496444702,"editorMode":"code"},"time":1710239995011,"type":"auto","id":"72ea8cb1-65f2-4457-9a51-de033dbb0ca0","name":"acrid-eve"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int[]) bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: List ~ ResourceType ~\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace() bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-62.94526278402678,"y":-402.47456429287104},"zoom":1.9468940496444702,"editorMode":"code"},"time":1710239935008,"type":"auto","id":"1d1575db-1b5d-4f85-82d4-56b400294f1f","name":"slimy-football"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace(availableResources : int) bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: List ~ ResourceType ~\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace() bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":0.054631898946883695,"y":-34.4745892154543},"zoom":1.9468940496444702,"editorMode":"code"},"time":1710239875022,"type":"auto","id":"12928ae9-60e7-419c-9d7c-cf2fc2d984f8","name":"chubby-microphone"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace() bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: List ~ ResourceType ~\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace() bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-123.94534198010287,"y":-154.47459023594348},"zoom":1.9468940496444702,"editorMode":"code"},"time":1710239815018,"type":"auto","id":"eb74ea7b-d58e-4d79-9177-039acd40a7a6","name":"rich-van"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace() bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: List ~ ResourceType ~\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace() bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-231.94537182725404,"y":-336.47468339126993},"zoom":1.9468940496444702,"editorMode":"code"},"time":1710239755016,"type":"auto","id":"5c94ecb9-19f8-458f-b1c1-2cc522d77dd6","name":"incalculable-crowd"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace() bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\nclass GoldenCard{\n    - requiredResources: List ~ ResourceType ~\n}\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace() bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-163.9452809563336,"y":-366.4745981752008},"zoom":1.9468940496444702,"editorMode":"code"},"time":1710239695020,"type":"auto","id":"a8cffedb-2ccb-41b9-a9dd-490a0d940d59","name":"burly-oyster"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - requiredResources: List\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace() bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace() bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-25.945336325251503,"y":-38.47461467167105},"zoom":1.9468940496444702,"editorMode":"code"},"time":1710239635009,"type":"auto","id":"d9c868e8-c84e-40f9-ba74-21c4f99df7de","name":"zealous-toothbrush"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - requiredResources: List\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace() bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":7.054643573791228,"y":-0.4745700788221683},"zoom":1.9468940496444702,"editorMode":"code"},"time":1710239455012,"type":"auto","id":"b1a1142d-403e-443f-9d87-a7c8aa991b78","name":"huge-woman"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - requiredResources: List\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace() bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":98.05463755379824,"y":-121.47458403807255},"zoom":1.9468940496444702,"editorMode":"code"},"time":1710239275016,"type":"auto","id":"c14e89b9-6e20-45e2-bea1-7177e1f0ebee","name":"fluffy-minister"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n    - requiredResources: List\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace() bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":53.05466018258941,"y":124.52541673898881},"zoom":1.9468940496444702,"editorMode":"code"},"time":1710239215020,"type":"auto","id":"e6d046b1-18a1-4b71-bfb2-650d2e42c9e3","name":"whining-businessperson"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n    + canPlace() bool\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-92.94544055623874,"y":-583.4746182106081},"zoom":1.9468940496444702,"editorMode":"code"},"time":1710239155022,"type":"auto","id":"5aad7c63-0214-4d76-9ea1-eb97918d8054","name":"thousands-room"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n    + canPlace() bool\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":31.054585920467225,"y":-19.474684421145014},"zoom":1.9468940496444702,"editorMode":"code"},"time":1710239095015,"type":"auto","id":"e1839964-6b2d-4948-908f-a48dad34bd69","name":"gigantic-london"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":31.05469094496182,"y":26.525280230564164},"zoom":1.946894028859201,"editorMode":"code"},"time":1710239035010,"type":"auto","id":"84dc6993-e0ff-4f89-a989-e56069e2b604","name":"icy-fall"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":97.05465003842397,"y":-84.47473465016523},"zoom":1.946894028859201,"editorMode":"code"},"time":1710238975020,"type":"auto","id":"99b086d2-e26a-45d4-bbb1-99e1ce96db67","name":"acidic-ad"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-391.12348969269163,"y":-215.52082697322595},"zoom":1.670082974796803,"editorMode":"code"},"time":1710238735012,"type":"auto","id":"55032b2b-c73c-4fa8-ad8e-47cb781241b8","name":"silly-wolf"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-288.12349168708545,"y":-207.52081836710585},"zoom":1.670082974796803,"editorMode":"code"},"time":1710238615022,"type":"auto","id":"e428e208-cbba-414a-8f5c-c1f906769d5c","name":"gentle-leather"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":154.8765111244167,"y":-259.52078406833436},"zoom":1.670082974796803,"editorMode":"code"},"time":1710238555022,"type":"auto","id":"192e049a-da7b-4cc6-a832-0ffe1d665f33","name":"gray-rocket"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-332.87450412244493,"y":-393.4790591903717},"zoom":1.9449492615009296,"editorMode":"code"},"time":1710238495015,"type":"auto","id":"06e6d643-d54d-4a85-930d-dddbb3f1e9b9","name":"handsome-dream"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-955.2022590100848,"y":-407.76993339950303},"zoom":2.1088411808013916,"editorMode":"code"},"time":1710238315017,"type":"auto","id":"772164d5-6bc1-436f-b99b-512f19095c13","name":"anxious-alligator"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-507.20240295006846,"y":-846.7700161730831},"zoom":2.1088411808013916,"editorMode":"code"},"time":1710238255017,"type":"auto","id":"634aa970-db5c-4a6a-a9a8-70950dce0761","name":"mushy-morn"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-569.202423724696,"y":-892.7700095325099},"zoom":2.1088411808013916,"editorMode":"code"},"time":1710238195010,"type":"auto","id":"f90de58a-4fcb-497c-800e-41077c649152","name":"delicious-zoo"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-594.2025662634355,"y":-778.770070577031},"zoom":2.1088411808013916,"editorMode":"code"},"time":1710238135021,"type":"auto","id":"b237c769-9e21-46ad-bd93-8bce1e09a65e","name":"helpful-baby"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int) Corner\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-395.20272379931635,"y":-577.7701392267361},"zoom":2.1088411808013916,"editorMode":"code"},"time":1710238075009,"type":"auto","id":"32aaa093-7175-4385-838b-6028abd299cc","name":"raspy-airport"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + getCorner(corner : int)\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-395.20272379931635,"y":-577.7701392267361},"zoom":2.1088411808013916,"editorMode":"code"},"time":1710238015021,"type":"auto","id":"7a4b1ae4-e755-49c0-884d-17dfb7480b34","name":"mango-table"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n    + getCurrSide() Side\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-339.2027417918143,"y":-576.7701517564985},"zoom":2.1088411808013916,"editorMode":"code"},"time":1710237955010,"type":"auto","id":"841270e7-b39c-4730-9630-4aef808ce728","name":"scary-fireman"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-247.20271303844194,"y":-322.77013127294464},"zoom":2.1088412710666433,"editorMode":"code"},"time":1710237895044,"type":"auto","id":"07f1f51e-302d-4a59-99ac-3ab8c35be843","name":"poor-zebra"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-82.20283630981857,"y":-57.770078918984154},"zoom":2.1088412710666433,"editorMode":"code"},"time":1710237835013,"type":"auto","id":"6809c33f-c873-4839-9434-1ed1a65f8cfd","name":"tasteless-nigeria"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-523.2027989544026,"y":-339.77003294033307},"zoom":2.1088412710666433,"editorMode":"code"},"time":1710237775008,"type":"auto","id":"ca693e10-b137-4ecc-b4ce-b7e483be079a","name":"round-russia"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard(card : Card, pos : Position) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, pos : Position, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-177.4149914418984,"y":-60.20854064394625},"zoom":1.5437769889831543,"editorMode":"code"},"time":1710237715009,"type":"auto","id":"1f95e69c-cf64-4e57-b4c7-27a0f87e9f1e","name":"bitter-child"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n    + placeCard\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + placeCard(card : Card) void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-491.4150891327054,"y":-70.20866250044008},"zoom":1.5437769889831543,"editorMode":"code"},"time":1710237655012,"type":"auto","id":"e6dbb825-02ad-4306-8bdc-2142da38d9ec","name":"lazy-fall"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n    + placeCard(card : Card, player : PlayerModel) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-577.5722966089066,"y":-108.61700819531265},"zoom":1.6659798622131345,"editorMode":"code"},"time":1710237595011,"type":"auto","id":"482ab09f-2025-45f5-9fd0-41183a82ae50","name":"rapping-kitchen"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-402.5724150528547,"y":-367.61700416676143},"zoom":1.6659798188035149,"editorMode":"code"},"time":1710237535013,"type":"auto","id":"230c148c-f74a-4b6d-bbbe-2abcea42458f","name":"faithful-insect"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-763.5724364465564,"y":-13.616967291004869},"zoom":1.6659798188035149,"editorMode":"code"},"time":1710237475021,"type":"auto","id":"89659f2c-8b27-44c2-a620-588334075d22","name":"uneven-afternoon"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-626.5725376493153,"y":-15.616975480258944},"zoom":1.6659798188035149,"editorMode":"code"},"time":1710237415013,"type":"auto","id":"31e4b159-785c-484b-b7ab-68f63ce9c349","name":"belligerent-adult"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-608.5725522349171,"y":49.383025803833235},"zoom":1.6659798188035149,"editorMode":"code"},"time":1710237295011,"type":"auto","id":"d2c958cd-91d4-4559-84c8-c31f74d203e4","name":"fluffy-sugar"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":5.4059402297731936,"y":-4.87257560736623},"zoom":1.7966915369033813,"editorMode":"code"},"time":1710235135025,"type":"auto","id":"897953c8-b7f8-45fb-95d9-f6ee7d9f454b","name":"elegant-toothbrush"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":5.4059402297731936,"y":-4.87257560736623},"zoom":1.796691591268061,"editorMode":"code"},"time":1710191887214,"type":"auto","id":"b7aca4c7-4dd9-4307-bb59-77698bbff244","name":"angry-plastic"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-38.86211674082966,"y":122.44326267720604},"zoom":0.9594970786605699,"editorMode":"code"},"time":1710191826473,"type":"auto","id":"2ca69ed6-bee5-4b4d-8304-b3d6479f6b59","name":"round-insurance"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":15.137894935227049,"y":20.443234972575176},"zoom":0.9594970786605699,"editorMode":"code"},"time":1710190987221,"type":"auto","id":"93d51897-9778-40f6-9217-05dda10f28e4","name":"microscopic-cartoon"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-268.4071719301025,"y":-48.38066216339908},"zoom":1.126749178186802,"editorMode":"code"},"time":1710186367209,"type":"auto","id":"1de05c31-42f4-4afb-9ef1-0cdca4061028","name":"weak-electrician"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-42.95521563222936,"y":-77.424025069451},"zoom":1.1267493097426104,"editorMode":"code"},"time":1710181146479,"type":"auto","id":"2d3164ad-642a-421f-9a38-a30d1bea09e1","name":"mango-account"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-256.95764771341953,"y":-214.083253461999},"zoom":1.4255702495574951,"editorMode":"code"},"time":1710180966477,"type":"auto","id":"667b32a5-b278-4fbe-8a36-66ad747f118a","name":"millions-monitor"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":39.042417304650115,"y":-17.083246432623348},"zoom":1.4255702495574951,"editorMode":"code"},"time":1710165804881,"type":"auto","id":"eb3c612f-b799-4086-bc0f-286766fb5a7f","name":"crashing-yottabyte"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-224.9575918989871,"y":-443.0831882263195},"zoom":1.4255702495574951,"editorMode":"code"},"time":1710165684880,"type":"auto","id":"a9b7d953-6880-4870-85c8-4abdcc85f86a","name":"scrawny-lizard"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":268.0420923710332,"y":-43.08319447620596},"zoom":1.4255702495574951,"editorMode":"code"},"time":1710165624880,"type":"auto","id":"742b2d98-cd12-4e10-8d7b-ee51cea78c27","name":"fit-telephone"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n    + setRandomFirstPlayer() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-556.9579657915734,"y":-57.083281089123034},"zoom":1.4255702495574951,"editorMode":"code"},"time":1710165504880,"type":"auto","id":"0ec278b8-af69-4807-b82e-1ee0bcbbf0d0","name":"victorious-toothbrush"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice(list : List) void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-621.1609503212796,"y":-136.56676482143362},"zoom":1.5438721179962158,"editorMode":"code"},"time":1710165444880,"type":"auto","id":"4e88dbcd-6a8e-44d7-8081-99fd6de9e8cd","name":"faithful-window"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice() void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-669.1609917712346,"y":-132.56677577634935},"zoom":1.5438721179962158,"editorMode":"code"},"time":1710165384881,"type":"auto","id":"601d8696-a580-447c-9361-beb3bb14b74b","name":"angry-student"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice() void\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-466.1609641655226,"y":-35.566760456022095},"zoom":1.5438721179962158,"editorMode":"code"},"time":1710165324880,"type":"auto","id":"5bc6abe0-274d-4cc3-8e0c-7ef4fc637b01","name":"thousands-daughter"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List\n    + setObjective(card : ObjectiveCard) void\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-466.1609641655226,"y":-35.566760456022095},"zoom":1.5438721179962158,"editorMode":"code"},"time":1710165264880,"type":"auto","id":"9e681dd6-6b65-461e-b288-dccd798b892a","name":"wide-spring"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() List \n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-469.1609343357179,"y":0.4332274042082638},"zoom":1.5438721179962158,"editorMode":"code"},"time":1710165024880,"type":"auto","id":"ddeded03-be47-47c1-8781-5ab4fd991a0f","name":"fluffy-keyboard"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() : List \n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-469.1609343357179,"y":0.4332274042082638},"zoom":1.5438721179962158,"editorMode":"code"},"time":1710164904880,"type":"auto","id":"fd521cce-7ac1-4610-bdaf-6c1051779cdc","name":"acceptable-librarian"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() : List \n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-462.1608886659666,"y":32.43320460573639},"zoom":1.5438721179962158,"editorMode":"code"},"time":1710164484880,"type":"auto","id":"c3b3da13-48bb-4c81-a6dc-4488c6bc976f","name":"curved-secretary"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n    + setObjectiveChoice() : List\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-543.1609478059567,"y":-98.56682566589699},"zoom":1.5438721179962158,"editorMode":"code"},"time":1710164424880,"type":"auto","id":"96c9ba78-625f-47ec-839e-5fd003ed7b98","name":"beautiful-match"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - secretObjective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + setObjectiveChoice() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-528.7982285779315,"y":60.11807198707157},"zoom":1.548214316368103,"editorMode":"code"},"time":1710164364880,"type":"auto","id":"06c6619a-71b7-4da0-a11d-c7c9523cd048","name":"enough-microphone"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    \n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-528.7982285779315,"y":60.11807198707157},"zoom":1.548214316368103,"editorMode":"code"},"time":1710164304880,"type":"auto","id":"c2936cce-eb79-4bf8-81ea-56746263aedd","name":"brave-ambulance"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-12.798140876561625,"y":119.1180170702809},"zoom":1.548214316368103,"editorMode":"code"},"time":1710164244881,"type":"auto","id":"86e24027-ff63-46f9-b161-930f918d23b4","name":"tasty-noon"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":0.20191549630245476,"y":145.11801943575608},"zoom":1.548214316368103,"editorMode":"code"},"time":1710164184880,"type":"auto","id":"099975f3-0118-436b-82a0-c2e796dbcbb9","name":"acceptable-zebra"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ ObjectiveCard ~\n\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-302.79806027677023,"y":-9.881993817036246},"zoom":1.548214316368103,"editorMode":"code"},"time":1710164125302,"type":"auto","id":"690dbfc3-f1aa-4f61-af4a-146c09e679f6","name":"most-airport"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~ Card ~\n\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-171.7979812811839,"y":141.11799359947076},"zoom":1.548214316368103,"editorMode":"code"},"time":1710164065302,"type":"auto","id":"bbc5bc74-c870-4037-a626-717e9fded75b","name":"bright-beach"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose : List ~  ~\n\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-250.79801139371867,"y":35.11793810535151},"zoom":1.548214316368103,"editorMode":"code"},"time":1710164005301,"type":"auto","id":"ec5b5728-7e6f-44da-b8ed-8c8fb5410228","name":"delicious-pizza"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose\n\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-53.798046962664024,"y":-37.88208636683119},"zoom":1.548214316368103,"editorMode":"code"},"time":1710163944881,"type":"auto","id":"31b90f55-72b9-4cd6-92ad-c86a8771084c","name":"modern-agency"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - objectiveToChoose\n\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":82.20194842901333,"y":124.11788931427076},"zoom":1.548214316368103,"editorMode":"code"},"time":1710163884884,"type":"auto","id":"91104539-f1eb-4db8-86c3-8a7a30c07eb2","name":"melodic-teenager"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n\n    - ob\n\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-265.79802549459896,"y":-36.88212957887369},"zoom":1.548214316368103,"editorMode":"code"},"time":1710163824880,"type":"auto","id":"90b6ca8c-3fea-4cfe-baf5-f6a32545be56","name":"noisy-telephone"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-615.7980926835423,"y":3.1178862995386645},"zoom":1.54821432999686,"editorMode":"code"},"time":1710163764880,"type":"auto","id":"5d7f4d28-2b01-401f-9aeb-ceaf5d3461ec","name":"ashamed-mother"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n}\n\nclass GameView{\n    + update() void\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-672.7278112480669,"y":-50.77028251829644},"zoom":1.7030357122421265,"editorMode":"code"},"time":1710163644880,"type":"auto","id":"52fad854-cdd3-49e8-a2e9-ea383434ea69","name":"apprehensive-action"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + setObjectiveChoice() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-672.7278112480669,"y":-50.77028251829644},"zoom":1.7030357122421265,"editorMode":"code"},"time":1710163524881,"type":"auto","id":"4ca59ac0-681e-4bfb-9f4d-408985ea4ee2","name":"bald-scientist"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n    + \n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-672.7278112480669,"y":-50.77028251829644},"zoom":1.7030357122421265,"editorMode":"code"},"time":1710163464881,"type":"auto","id":"e68990cc-712f-4ad4-a546-cfc440a49526","name":"eager-balloon"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-447.7258562032541,"y":-123.72398130626931},"zoom":1.4550598859786987,"editorMode":"code"},"time":1710163404881,"type":"auto","id":"7a7ae1d5-2d19-4a8f-b1a5-31ca5291f86a","name":"massive-piano"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-295.72579072956006,"y":-168.72395919441314},"zoom":1.4550598859786987,"editorMode":"code"},"time":1710163224880,"type":"auto","id":"dd5920ae-0c5c-465e-9beb-7f737d682dce","name":"limited-school"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() void\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-493.7257100355991,"y":17.276079429196933},"zoom":1.4550598859786987,"editorMode":"code"},"time":1710163104880,"type":"auto","id":"a26238ae-9495-489d-a550-33d18ec84270","name":"mysterious-furniture"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives() : void\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-493.7257100355991,"y":17.276079429196933},"zoom":1.4550598859786987,"editorMode":"code"},"time":1710163044880,"type":"auto","id":"4c51b93e-fdd6-472b-932c-474502d0b44e","name":"delightful-flag"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n    + setCommonObjectives()\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-493.7257100355991,"y":17.276079429196933},"zoom":1.4550598859786987,"editorMode":"code"},"time":1710162804881,"type":"auto","id":"a1380c1c-32dd-4071-865c-4875d303c4be","name":"thankful-exabyte"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + setCommonObjectives() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-493.7257100355991,"y":17.276079429196933},"zoom":1.4550598859786987,"editorMode":"code"},"time":1710162744880,"type":"auto","id":"dfbeb9eb-84ba-4042-aad8-7f87e161c4bf","name":"flaky-beach"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-493.7257100355991,"y":17.276079429196933},"zoom":1.4550598859786987,"editorMode":"code"},"time":1710162384881,"type":"auto","id":"f24255b4-2c12-415c-b554-9e3ab99a825d","name":"red-noon"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + drawObjectiveCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + drawObjectiveCard() Card\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-493.7257100355991,"y":17.276079429196933},"zoom":1.4550599184507609,"editorMode":"code"},"time":1710162264879,"type":"auto","id":"b920ee07-9d5d-406b-bfd5-bf84ac6ab86b","name":"tart-afternoon"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + drawObjectiveCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + drawObjectiveCard() Card\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-146.64411825590216,"y":64.91825144857087},"zoom":1.072853578615561,"editorMode":"code"},"time":1710162204880,"type":"auto","id":"221f00d3-686b-4976-9d9c-f0206511308e","name":"steep-truck"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + drawObjectiveCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + drawObjectiveCard() Card\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-476.45041490458465,"y":17.373235363651872},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710162144880,"type":"auto","id":"df8f1c27-e83d-45dd-a5d4-0b6840829bae","name":"great-mouse"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + drawObjectiveCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawCard(param : int) void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-476.45041490458465,"y":17.373235363651872},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710161905302,"type":"auto","id":"cc994153-7232-4c4a-9142-cff4e58302d4","name":"appalling-easter"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawResourceCard() Card\n    + drawGoldenCard() Card\n    + drawObjectiveCard() Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-476.45041490458465,"y":17.373235363651872},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710161784879,"type":"auto","id":"03b8fd88-c6f4-49c4-a54f-a5bb60e391e4","name":"able-dusk"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    \n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-476.45041490458465,"y":17.373235363651872},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710161724880,"type":"auto","id":"11c62fd7-75b3-4f72-828c-053fa3c1a3f0","name":"acoustic-artist"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-476.45041490458465,"y":17.373235363651872},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710161544881,"type":"auto","id":"4694e5c6-1d64-4517-924a-43e4324e07e6","name":"tall-flag"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-465.4505119757606,"y":36.37323504165122},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710161484882,"type":"auto","id":"615db152-caf4-41f1-b6e6-8b7257417a6e","name":"little-journalist"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-473.4504571287906,"y":24.373230685737482},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710161424883,"type":"auto","id":"a91ba244-d5ff-4322-b8ab-ad8c6902b905","name":"careful-summer"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n    + drawCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-509.4504701965318,"y":19.37319999531718},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710161364880,"type":"auto","id":"3f20bcf0-bfbf-46e7-871f-d580ed776bfa","name":"brief-kangaroo"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-377.45042228148066,"y":-96.62682767412082},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710161124880,"type":"auto","id":"c50640df-a0b7-412b-ba5b-95a9c8b5039a","name":"wet-oyster"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-430.4503404560028,"y":-181.62682965305353},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710161064881,"type":"auto","id":"3861ad73-04c6-4023-a978-337a24d26736","name":"important-sunset"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-323.45031605350005,"y":-46.62686727539274},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710161004881,"type":"auto","id":"6903cb45-1dd0-43d8-8de5-dac6c10d90ae","name":"unkempt-musician"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":39.549685773337416,"y":60.37315712710995},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710160945302,"type":"auto","id":"95d36b43-0968-429f-bca9-d2429c0a5c26","name":"worried-mouse"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":20.549751065114613,"y":-21.626843762844345},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710160644880,"type":"auto","id":"c1a065b7-6650-46fa-a8bf-8bae47d6e416","name":"bright-scooter"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-331.4501312669769,"y":38.373134703539975},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710160584895,"type":"auto","id":"320c3279-2b10-4652-89fd-e4c667fd3d8e","name":"rotten-knife"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    %% - animalCount : int\n    %% - plantCount : int\n    %% - fungiCount : int\n    %% - insectCount : int\n    - resourcesArr : int[]\n\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-331.4501312669769,"y":38.373134703539975},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710160524891,"type":"auto","id":"fa834470-4aae-4cc5-a6ef-6f6433fa5f62","name":"bland-twilight"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    %% - animalCount : int\n    %% - plantCount : int\n    %% - fungiCount : int\n    %% - insectCount : int\n    - resourcesArr : int[]\n\n    %% - quillCount : int\n    %% - inkwellCount : int\n    %% - manuscriptCount : int\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-258.45009033077355,"y":25.373137203497485},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710160464881,"type":"auto","id":"9b0dd384-6000-4556-a1e4-9f33f676dc86","name":"thoughtless-pharmacist"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    %% - animalCount : int\n    %% - plantCount : int\n    %% - fungiCount : int\n    %% - insectCount : int\n    - resourcesArr : int[]\n\n    %% - quillCount : int\n    %% - inkwellCount : int\n    %% - manuscriptCount : int\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-95.45018997795465,"y":24.373122402776552},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710160344895,"type":"auto","id":"3fa02445-cb65-457a-9287-9cce930ac53a","name":"bashful-crowd"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    %% - animalCount : int\n    %% - plantCount : int\n    %% - fungiCount : int\n    %% - insectCount : int\n    - resourcesArr : int[]\n\n    %% - quillCount : int\n    %% - inkwellCount : int\n    %% - manuscriptCount : int\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-82.45034407405745,"y":16.373133936562184},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710160284882,"type":"auto","id":"04a30fd2-025c-40b9-b2ef-e290598c36fe","name":"short-shampoo"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    %% - animalCount : int\n    %% - plantCount : int\n    %% - fungiCount : int\n    %% - insectCount : int\n    - resourcesArr : int[]\n\n    %% - quillCount : int\n    %% - inkwellCount : int\n    %% - manuscriptCount : int\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : Map ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-450.4503332781308,"y":-19.626879131179024},"zoom":1.4625083208084106,"editorMode":"code"},"time":1710160224895,"type":"auto","id":"face481f-806d-458d-bdfe-5f80ab10115e","name":"itchy-receptionist"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    %% - animalCount : int\n    %% - plantCount : int\n    %% - fungiCount : int\n    %% - insectCount : int\n    - resourcesArr : int[]\n\n    %% - quillCount : int\n    %% - inkwellCount : int\n    %% - manuscriptCount : int\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":92.5407952309651,"y":68.74859948279548},"zoom":0.9174781509079764,"editorMode":"code"},"time":1710160044881,"type":"auto","id":"ff752a3a-6160-495c-b014-6cc48aceded9","name":"appalling-lunch"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    %% - animalCount : int\n    %% - plantCount : int\n    %% - fungiCount : int\n    %% - insectCount : int\n    - resourcesArr : int[]\n\n    %% - quillCount : int\n    %% - inkwellCount : int\n    %% - manuscriptCount : int\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-27.206008681555033,"y":22.134283660143907},"zoom":1.1519649028778076,"editorMode":"code"},"time":1710159745304,"type":"auto","id":"370516e8-11b3-47b8-be93-42c0a4eb9d47","name":"stocky-summer"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    %% - animalCount : int\n    %% - plantCount : int\n    %% - fungiCount : int\n    %% - insectCount : int\n    - resourcesArr : int[]\n\n    %% - quillCount : int\n    %% - inkwellCount : int\n    %% - manuscriptCount : int\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-27.206008681555033,"y":22.134283660143907},"zoom":1.1519648571918757,"editorMode":"code"},"time":1710094744367,"type":"auto","id":"17b281a8-ccb0-4f06-b606-22bf0d09497e","name":"sour-dog"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    %% - animalCount : int\n    %% - plantCount : int\n    %% - fungiCount : int\n    %% - insectCount : int\n    - resourcesArr : int[]\n\n    %% - quillCount : int\n    %% - inkwellCount : int\n    %% - manuscriptCount : int\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-75.20594523825257,"y":70.13428254729791},"zoom":1.1519648571918757,"editorMode":"code"},"time":1710094564224,"type":"auto","id":"c4283c86-7d31-48a3-8e29-b9f1850904be","name":"broad-yak"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    %% - animalCount : int\n    %% - plantCount : int\n    %% - fungiCount : int\n    %% - insectCount : int\n    - resourcesArr : int[]\n\n    %% - quillCount : int\n    %% - inkwellCount : int\n    %% - manuscriptCount : int\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-123.04254721759156,"y":28.28598343357282},"zoom":1.0674661802114698,"editorMode":"code"},"time":1710094504232,"type":"auto","id":"eb08a7f1-6d88-449b-9ce2-8f28a1f21e81","name":"spoiled-alligator"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    %% - animalCount : int\n    %% - plantCount : int\n    %% - fungiCount : int\n    %% - insectCount : int\n    - resourcesArr : int[]\n\n    %% - quillCount : int\n    %% - inkwellCount : int\n    %% - manuscriptCount : int\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":93.97160179580817,"y":51.53463889774191},"zoom":0.8437095284461975,"editorMode":"code"},"time":1710089944375,"type":"auto","id":"10da7c14-93a3-4a1a-8a8e-384552decf6b","name":"yellow-dream"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    %% - animalCount : int\n    %% - plantCount : int\n    %% - fungiCount : int\n    %% - insectCount : int\n    - resourcesArr : int[]\n\n    %% - quillCount : int\n    %% - inkwellCount : int\n    %% - manuscriptCount : int\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":93.97160179580817,"y":51.53463889774191},"zoom":0.8437095530934692,"editorMode":"code"},"time":1710077351551,"type":"auto","id":"0063c946-7c52-4cb0-8ef7-65fdae13ff23","name":"aggressive-shampoo"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    %% - animalCount : int\n    %% - plantCount : int\n    %% - fungiCount : int\n    %% - insectCount : int\n    - resourcesArr : int[]\n\n    %% - quillCount : int\n    %% - inkwellCount : int\n    %% - manuscriptCount : int\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-90.27061322493178,"y":78.11203586735479},"zoom":1.1545373133061632,"editorMode":"code"},"time":1710069642713,"type":"auto","id":"090c144b-5069-4f17-9b2a-868f34bee9a2","name":"yellow-hospital"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    %% - animalCount : int\n    %% - plantCount : int\n    %% - fungiCount : int\n    %% - insectCount : int\n    - resourcesArr : int[]\n\n    %% - quillCount : int\n    %% - inkwellCount : int\n    %% - manuscriptCount : int\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-144.27062160205256,"y":96.11203296099299},"zoom":1.1545373133061632,"editorMode":"code"},"time":1710069583264,"type":"auto","id":"b54f21e4-399b-4ddb-a3e4-e3ee2e6c0225","name":"delicious-grandmother"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    %% - animalCount : int\n    %% - plantCount : int\n    %% - fungiCount : int\n    %% - insectCount : int\n    - resourcesArr : int[]\n\n    %% - quillCount : int\n    %% - inkwellCount : int\n    %% - manuscriptCount : int\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-233.89548733944025,"y":-80.22843687792519},"zoom":1.2487106323242188,"editorMode":"code"},"time":1710069522712,"type":"auto","id":"7c94c3a2-dd60-42d1-8a5c-5f4829d698f2","name":"sour-summer"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL = 0\n    INKWELL = 1\n    MANUSCRIPT = 2\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    %% - animalCount : int\n    %% - plantCount : int\n    %% - fungiCount : int\n    %% - insectCount : int\n    - resourcesArr : int[]\n\n    %% - quillCount : int\n    %% - inkwellCount : int\n    %% - manuscriptCount : int\n    - objectsArr : int[]\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":8.104709472623545,"y":-36.228406136834465},"zoom":1.2487106323242188,"editorMode":"code"},"time":1710068922724,"type":"auto","id":"c754703a-4d26-4a34-a2bf-feb4dd2ecf57","name":"better-gold"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT = 3\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    %% - animalCount : int\n    %% - plantCount : int\n    %% - fungiCount : int\n    %% - insectCount : int\n    - resourceArr : int[]\n\n    %% - quillCount : int\n    %% - inkwellCount : int\n    %% - manuscriptCount : int\n    -objectsArr\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":0.10474086475389299,"y":-57.22837920462166},"zoom":1.2487106323242188,"editorMode":"code"},"time":1710068862713,"type":"auto","id":"d6558b22-1cb5-48a9-800a-3d3221731897","name":"alive-coffeeshop"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL = 0\n    PLANT = 1\n    FUNGI = 2\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":0.10474086475389299,"y":-57.22837920462166},"zoom":1.2487106323242188,"editorMode":"code"},"time":1710068742721,"type":"auto","id":"1af62bad-b787-4801-b660-100e7bbfc7fb","name":"flaky-accident"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-1.9115285716822967,"y":-7.891121360616587},"zoom":1.1545376777648926,"editorMode":"code"},"time":1710068562722,"type":"auto","id":"56907f89-5d24-4130-9787-b83601818eb5","name":"long-restaurant"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-1.9115285716822967,"y":-7.891121360616587},"zoom":1.1545377209987993,"editorMode":"code"},"time":1710068442723,"type":"auto","id":"aac4d996-bf80-4e18-81d8-931a34bfaa55","name":"raspy-baby"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Front{\n    @override()\n    + getResources() List ~ ResourceType ~\n    @override()\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-102.9318242426238,"y":-299.5563151073251},"zoom":1.3505654335021973,"editorMode":"code"},"time":1710068382724,"type":"auto","id":"2216ac43-47c9-456b-a1c3-8f00f2047be1","name":"enough-nail"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n}\n\nclass Front{\n    +@override\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":29.0681887125659,"y":-311.5563308297675},"zoom":1.3505654335021973,"editorMode":"code"},"time":1710068322742,"type":"auto","id":"a0e2a57d-b329-4382-9e78-c28e5011b325","name":"pitiful-pencil"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n}\n\nclass Front{\n    @override\n    \n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":29.0681887125659,"y":-311.5563308297675},"zoom":1.3505654335021973,"editorMode":"code"},"time":1710068262712,"type":"auto","id":"a3bcebda-1c3f-4847-8c31-30fb0b7b6de0","name":"aloof-pencil"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n}\n\n%% class Front{\n\n%% }\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":29.0681887125659,"y":-311.5563308297675},"zoom":1.3505654182874178,"editorMode":"code"},"time":1710068143264,"type":"auto","id":"9d02f780-947d-46b8-a8b4-ab7f277a3d5d","name":"lively-machine"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n}\n\n%% class Front{\n\n%% }\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-16.931737712187726,"y":-306.55643099619397},"zoom":1.3505654182874178,"editorMode":"code"},"time":1710068082723,"type":"auto","id":"7477342d-e4fc-4238-8ce6-4d0400b1b03b","name":"brown-farmer"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n}\n\n%% class Front{\n\n%% }\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-17.237220108726177,"y":-112.02394284288394},"zoom":1.4607281905241754,"editorMode":"code"},"time":1710068023263,"type":"auto","id":"415f8107-5a89-4c94-97ac-da243dff76e5","name":"unimportant-plumber"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n}\n\n%% class Front{\n\n%% }\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-1.6758252313680089,"y":-47.62471245697563},"zoom":1.1545379326595646,"editorMode":"code"},"time":1710067962714,"type":"auto","id":"c095a16f-32e2-44d4-976f-ca60489b8c87","name":"calm-teacher"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n}\n\n%% class Front{\n\n%% }\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":58.11850054550787,"y":18.731828520700184},"zoom":0.8437101370481741,"editorMode":"code"},"time":1710067902713,"type":"auto","id":"87767579-dfad-4125-b6ff-5bfe1fae7a66","name":"hot-fountain"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n}\n\n%% class Front{\n\n%% }\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-135.63186390713602,"y":-206.30268394386735},"zoom":1.2487113021970488,"editorMode":"code"},"time":1710067842714,"type":"auto","id":"aa0f87b7-ebc0-41fc-a06f-1dabf254304a","name":"abnormal-eye"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n}\n\n%% class Front{\n\n%% }\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nclass ResourceCorner{\n    - resource : ResourceType\n}\n\nclass ObjectCorner{\n    - object : ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-263.0421594462214,"y":-449.05651621212996},"zoom":1.460728645324707,"editorMode":"code"},"time":1710067782724,"type":"auto","id":"cdc17f64-1724-41b0-9a29-05115c5c10b4","name":"chubby-lunch"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n}\n\n%% class Front{\n\n%% }\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nc\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List ~ Card ~\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-263.0421594462214,"y":-449.05651621212996},"zoom":1.460728645324707,"editorMode":"code"},"time":1710067722716,"type":"auto","id":"b1b83b58-a42f-44a1-abe6-206ae1386f56","name":"icy-lunch"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n}\n\n%% class Front{\n\n%% }\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-263.0421594462214,"y":-449.05651621212996},"zoom":1.4607285884746326,"editorMode":"code"},"time":1710067662721,"type":"auto","id":"3abe1da3-0806-4867-8e30-8a7ed94d8ff6","name":"nutritious-beard"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n}\n\n%% class Front{\n\n%% }\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    <<abstract>>\n    + canPlace() bool\n    + getObject() ObjectType\n    + getResource() ResourceType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    <<abstract>>\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-233.19294469727657,"y":-424.90565723831025},"zoom":1.460728645324707,"editorMode":"code"},"time":1710067602722,"type":"auto","id":"fde6ec57-4c3c-4ae9-865e-4b1c13ca92b3","name":"large-machine"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n}\n\n%% class Front{\n\n%% }\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n    + getObject() ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-157.19295167975673,"y":-369.9056528193927},"zoom":1.4607286963272172,"editorMode":"code"},"time":1710067542722,"type":"auto","id":"58819f7f-0ce5-48fa-89c9-6b83eeef78bd","name":"curved-parrot"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n}\n\n%% class Front{\n\n%% }\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n    + getObject() ObjectType\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-293.7552306434065,"y":-351.6642088003902},"zoom":1.3505661487579346,"editorMode":"code"},"time":1710067482720,"type":"auto","id":"77abad3e-e762-4138-8347-d1e6c07bb486","name":"alert-shoe"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n}\n\nclass Front{\n    + getCornerResources() List ~ ResourceType ~\n    + getCornerObjects() List ~ ObjectType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-331.75525301959226,"y":-335.6642344095765},"zoom":1.3505661487579346,"editorMode":"code"},"time":1710067422721,"type":"auto","id":"7b9fc059-982b-421d-8689-a66e68561fd0","name":"huge-stone"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n}\n\nclass Front{\n    + getCornerResources() List ~ ResourceType ~\n    + getCornerResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-145.75526774061305,"y":-327.6642377016341},"zoom":1.3505661487579346,"editorMode":"code"},"time":1710067362720,"type":"auto","id":"94725894-74fc-4b63-8ff8-41da1fd305d6","name":"blue-morning"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    + getPermanentResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-145.75526774061305,"y":-327.6642377016341},"zoom":1.3505661487579346,"editorMode":"code"},"time":1710067302722,"type":"auto","id":"e0307e61-eb8c-4ea6-b427-da8ff03f1f40","name":"rough-girl"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n    + getObjects() List ~ ObjectType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    + getPermanentResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":74.24471292508824,"y":-183.66421859030112},"zoom":1.3505661487579346,"editorMode":"code"},"time":1710067242722,"type":"auto","id":"4aae4ba5-8f4a-4981-aada-5c6870a74450","name":"annoyed-nigeria"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + getResources() List ~ ResourceType ~\n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    + getPermanentResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-20.437383290815117,"y":-298.39944963058207},"zoom":1.3505661487579346,"editorMode":"code"},"time":1710067062713,"type":"auto","id":"d5d7f8da-3503-4571-8fdb-afd7cd50cfff","name":"flabby-crowd"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + \n}\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    + getPermanentResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-20.437383290815117,"y":-298.39944963058207},"zoom":1.3505661487579346,"editorMode":"code"},"time":1710067002713,"type":"auto","id":"1334ef75-78fb-43f6-8935-a032dc96d222","name":"rotten-baby"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResources : List ~ ResourceType ~\n\n    + getPermanentResources() List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":9.562568691960593,"y":-201.39943849026758},"zoom":1.3505661487579346,"editorMode":"code"},"time":1710066942727,"type":"auto","id":"62d32ea8-ae70-4fae-a66f-92a08ae1dfef","name":"unkempt-psychiatrist"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class StarterCard{\n\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ~ ResourceType ~\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":23.56254628392258,"y":-300.3994464294338},"zoom":1.3505660951786722,"editorMode":"code"},"time":1710066882721,"type":"auto","id":"3117adb7-8766-4e83-849d-f2651ac05c8f","name":"bulky-army"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass StarterCard{\n    - permanentResource : List ~ ResourceType ~\n    \n    + getPermanentResources() List ~ ResourceType ~\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":51.66945747003399,"y":-340.08918338077217},"zoom":1.7087444789265867,"editorMode":"code"},"time":1710066822722,"type":"auto","id":"d7b16857-8184-45bc-9bed-d628fabc72f0","name":"zealous-activity"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass StarterCard{\n    - permanentResource : List ~ ResourceType ~\n    \n    + getPermanentResources() List ~ ResourceType ~\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":7.091938374035577,"y":-110.91249478837995},"zoom":1.3505663871765137,"editorMode":"code"},"time":1710066762723,"type":"auto","id":"d523b24a-9a6f-4f80-b1be-684fbbf3f699","name":"handsome-eggplant"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass StarterCard{\n    - permanentResource : List ~ ResourceType ~\n    \n    + \n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":7.091938374035577,"y":-110.91249478837995},"zoom":1.3505663847897438,"editorMode":"code"},"time":1710066702722,"type":"auto","id":"f90e07db-e7a0-443d-9fc7-28ee51ab7d63","name":"melted-lizard"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass StarterCard{\n    - permanentResource : List ~ ResourceType ~\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-21.25009976677331,"y":-27.450868512967208},"zoom":1.4607291425117592,"editorMode":"code"},"time":1710066642722,"type":"auto","id":"84b8a462-26d5-4d01-bfcd-a6c86262af04","name":"unkempt-zettabyte"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass StarterCard{\n    - permanentResource : List ~ ResourceType ~\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-17.250151758173445,"y":-49.45089153199585},"zoom":1.4607291425117592,"editorMode":"code"},"time":1710066582723,"type":"auto","id":"bad75360-cb37-4777-8580-c2bbb6f3a5cc","name":"unsightly-ghost"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass StarterCard{\n    - permanentResource : List ~ ResourceType ~\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":160.05651716681314,"y":-129.40255939297325},"zoom":1.2487118244171143,"editorMode":"code"},"time":1710066522714,"type":"auto","id":"908cea6a-33c6-447a-bcdc-e29c31849767","name":"busy-tent"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass StarterCard{\n    - List ~ \\`~ ~\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":160.05651716681314,"y":-129.40255939297325},"zoom":1.2487118244171143,"editorMode":"code"},"time":1710066462716,"type":"auto","id":"95a28854-3dc4-4b56-9e00-29758efed00c","name":"hollow-baby"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place() void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":104.37535070115801,"y":-194.51336933205766},"zoom":1.4607291929536015,"editorMode":"code"},"time":1710066402776,"type":"auto","id":"749ab8a2-f327-4958-a24b-b83c84af7c4a","name":"flaky-advantage"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    %% - topCard : Card\n    %% - bottomCard : Card\n    %% - leftCard : Card\n    %% - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":37.57225871139007,"y":-8.105766933400758},"zoom":1.5798778496283568,"editorMode":"code"},"time":1710066342789,"type":"auto","id":"35f7f80d-85b6-4f9e-a92b-cc68b693385a","name":"fierce-lizard"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    %% - topCard : Card\n    %% - bottomCard : Card\n    %% - leftCard : Card\n    %% - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int) void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-516.3927789126394,"y":-21.089435493089717},"zoom":1.5798779726028442,"editorMode":"code"},"time":1710066282722,"type":"auto","id":"85ba595c-3b96-4929-9981-7f8e58a5148d","name":"tiny-salesclerk"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    %% - topCard : Card\n    %% - bottomCard : Card\n    %% - leftCard : Card\n    %% - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-516.3927789126394,"y":-21.089435493089717},"zoom":1.5798779726028442,"editorMode":"code"},"time":1710066222722,"type":"auto","id":"0df8b18e-455a-4156-b30b-4aa6bd59841b","name":"inexpensive-honey"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    %% - topCard : Card\n    %% - bottomCard : Card\n    %% - leftCard : Card\n    %% - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-516.3927789126394,"y":-21.089435493089717},"zoom":1.5798779938677678,"editorMode":"code"},"time":1710066162713,"type":"auto","id":"48236b14-420c-40ca-a710-657746a9ce62","name":"acceptable-shoe"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    %% - topCard : Card\n    %% - bottomCard : Card\n    %% - leftCard : Card\n    %% - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-508.39273427332125,"y":-55.08943056190388},"zoom":1.5798779938677678,"editorMode":"code"},"time":1710066102719,"type":"auto","id":"d801802b-7cb9-49ec-b95a-b13b297dc2dd","name":"bald-student"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    %% - topCard : Card\n    %% - bottomCard : Card\n    %% - leftCard : Card\n    %% - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-547.4089731974418,"y":-106.21006347380526},"zoom":1.7087451761688763,"editorMode":"code"},"time":1710066042723,"type":"auto","id":"5bddcc16-c59e-48c0-b1ec-4734cd58913c","name":"sticky-xylophone"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    %% - topCard : Card\n    %% - bottomCard : Card\n    %% - leftCard : Card\n    %% - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board : HashMap ~ PlayerModel, int ~\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-166.67210636298577,"y":68.7711734843373},"zoom":1.2734326124191284,"editorMode":"code"},"time":1710065982714,"type":"auto","id":"74bfb5ef-48bb-4026-b017-b60ee1e9388b","name":"petite-disease"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    %% - topCard : Card\n    %% - bottomCard : Card\n    %% - leftCard : Card\n    %% - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~) Card\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-166.67210636298577,"y":68.7711734843373},"zoom":1.2734326124191284,"editorMode":"code"},"time":1710065862722,"type":"auto","id":"1e2fa558-a485-413e-a2ea-943d9500c44e","name":"better-france"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    %% - topCard : Card\n    %% - bottomCard : Card\n    %% - leftCard : Card\n    %% - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-166.67210636298577,"y":68.7711734843373},"zoom":1.2734326124191284,"editorMode":"code"},"time":1710065802713,"type":"auto","id":"76a5aa8d-3337-4db6-956f-7791b542b8fb","name":"refined-monitor"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    %% - topCard : Card\n    %% - bottomCard : Card\n    %% - leftCard : Card\n    %% - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-177.67209572612782,"y":69.77120817480416},"zoom":1.2734326124191284,"editorMode":"code"},"time":1710065682721,"type":"auto","id":"e40ad0e1-efe1-485e-8006-b87364620faf","name":"brief-tent"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    %% - topCard : Card\n    %% - bottomCard : Card\n    %% - leftCard : Card\n    %% - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n    + placeStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-80.6721823923844,"y":11.771157287693317},"zoom":1.2734326124191284,"editorMode":"code"},"time":1710065622721,"type":"auto","id":"d300e377-f7f6-4027-a3e0-ea84c7b4ffd6","name":"ugly-egg"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    %% - topCard : Card\n    %% - bottomCard : Card\n    %% - leftCard : Card\n    %% - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":55.327828727187644,"y":-2.2288577004506323},"zoom":1.2734326124191284,"editorMode":"code"},"time":1710065562712,"type":"auto","id":"f118ec7d-41fa-4376-b932-0e18864ecdf6","name":"poor-hydrogen"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":55.327828727187644,"y":-2.2288577004506323},"zoom":1.2734325560900168,"editorMode":"code"},"time":1710065502714,"type":"auto","id":"e3abaad4-a4d2-420f-b6e5-95ed699c2c1f","name":"echoing-oyster"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-84.87387988903401,"y":39.09786044299856},"zoom":1.3773036562577388,"editorMode":"code"},"time":1710065442735,"type":"auto","id":"0eb23d01-a6ae-4c53-8bd5-ad114c403c2c","name":"savory-motherboard"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-90.87383878844486,"y":-60.90214845952433},"zoom":1.3773036562577388,"editorMode":"code"},"time":1710065382712,"type":"auto","id":"9d2dcffb-8484-47cb-acc4-6f63a1a82e30","name":"future-evening"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":33.12612354589262,"y":-4.9021654698235295},"zoom":1.3773036562577388,"editorMode":"code"},"time":1710065322713,"type":"auto","id":"9e2a8bd0-5c82-46c0-9725-47a8a0c53faf","name":"nervous-breakfast"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeStarterCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-513.8320985641641,"y":14.87446032987232},"zoom":1.611154556274414,"editorMode":"code"},"time":1710065262721,"type":"auto","id":"1e97064d-7e9e-4e99-bc30-57df65c25e98","name":"bent-insurance"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-569.8321641341824,"y":-51.12551849114029},"zoom":1.611154608450931,"editorMode":"code"},"time":1710065202716,"type":"auto","id":"e96d4a17-e3d0-4616-9df1-dd90839c9db0","name":"huge-byte"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-505.8321679633687,"y":2.874495508122891},"zoom":1.611154608450931,"editorMode":"code"},"time":1710065142717,"type":"auto","id":"c4fd69cd-8b4d-494a-b4bb-6d0879433f5e","name":"adventurous-printer"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-464.83233984614213,"y":-89.1254875006625},"zoom":1.611154608450931,"editorMode":"code"},"time":1710064962723,"type":"auto","id":"b5285267-d8af-45d1-b7b4-490d349bbcd2","name":"wailing-twilight"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + equals(obj : Object) bool\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-363.35433260300624,"y":-16.167994983956483},"zoom":2.204713821411133,"editorMode":"code"},"time":1710064902714,"type":"auto","id":"41bf8b40-aaf3-485d-be27-5f03b21ddc43","name":"abrasive-boots"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getY() int\n    + equals(obj, obj) bool\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-363.35433260300624,"y":-16.167994983956483},"zoom":2.204713821411133,"editorMode":"code"},"time":1710064842721,"type":"auto","id":"90770fd0-1f30-4a6d-807c-aad00f8ad3ac","name":"clumsy-shampoo"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos : int\n    - yPos : int\n\n    + setX(x : int) void\n    + setY(y : int) void\n    + getX() int\n    + getX() int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-281.1030401541255,"y":-27.5145530974376},"zoom":1.4896477460861206,"editorMode":"code"},"time":1710064782715,"type":"auto","id":"990f1458-77ca-4003-adc1-c93c839fc351","name":"aloof-butcher"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass Position{\n    - xPos int\n    - yPos int\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-281.1030401541255,"y":-27.5145530974376},"zoom":1.4896477460861206,"editorMode":"code"},"time":1710064722723,"type":"auto","id":"70bf531a-f4b2-4897-b022-d8c3ecd3616c","name":"weak-easter"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + flipStarterCard()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-281.1030401541255,"y":-27.5145530974376},"zoom":1.4896477460861206,"editorMode":"code"},"time":1710064662722,"type":"auto","id":"ef4dd70b-54a4-4136-b409-85ea5be3f7ef","name":"full-gas"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + changeStarterSide()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\nGameController*-->\"1 ... n\" PlayerView\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-295.1030336174594,"y":-27.51461682028009},"zoom":1.4896477460861206,"editorMode":"code"},"time":1710064602762,"type":"auto","id":"c7b85929-bb16-41ea-b28a-a5b5c07c073b","name":"scruffy-continent"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + changeStarterSide()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n    + flipStarterCard()\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-357.1030653577882,"y":9.48537197308741},"zoom":1.4896477460861206,"editorMode":"code"},"time":1710064542721,"type":"auto","id":"64dde206-a3f1-4d46-b930-f2f16871a5f0","name":"able-branch"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + changeStarterSide()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + flipStarterCard() void\n    + placeCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-357.1030653577882,"y":9.48537197308741},"zoom":1.4896477460861206,"editorMode":"code"},"time":1710064482721,"type":"auto","id":"77bd3021-bb1e-418e-b064-0e57206fda30","name":"muscular-holiday"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + changeStarterSide()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n    + placeCard() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-357.1030653577882,"y":9.48537197308741},"zoom":1.4896477460861206,"editorMode":"code"},"time":1710064422713,"type":"auto","id":"77bd90b9-239a-47e0-abf2-d965c162103e","name":"abrasive-vulture"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\n%% class Side{\n    \n%% }\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + changeStarterSide()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-357.1030653577882,"y":9.48537197308741},"zoom":1.4896477493442508,"editorMode":"code"},"time":1710064362721,"type":"auto","id":"81935c8c-2a64-488f-be6b-8d35ed6370ce","name":"panicky-morning"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n    + changeCurrSide() void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + changeStarterSide()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-60.28304822451548,"y":-1.685612878854613},"zoom":1.4896478652954102,"editorMode":"code"},"time":1710064302721,"type":"auto","id":"b6168c30-eab0-4d87-b786-c9887f897561","name":"burly-mother"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + changeStarterSide()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-122.28304276193091,"y":-7.685624174464834},"zoom":1.4896478346786013,"editorMode":"code"},"time":1710064242722,"type":"auto","id":"3babae3d-b7ec-448d-af37-926af819b591","name":"sparse-london"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + changeStarterSide()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-286.2831120192755,"y":-79.68563029886938},"zoom":1.4896478346786013,"editorMode":"code"},"time":1710064182722,"type":"auto","id":"ef174f10-48d0-4263-82d5-d93fd90cde7a","name":"average-lion"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + changeStarterSide()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-187.96587010041853,"y":-49.23061353083452},"zoom":1.3713387104062427,"editorMode":"code"},"time":1710064122722,"type":"auto","id":"424058c4-f91b-443b-af66-b56f9613978a","name":"echoing-brother"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + changeStarterSide()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-229.65156214730817,"y":34.45524864113588},"zoom":1.172295999151358,"editorMode":"code"},"time":1710064002712,"type":"auto","id":"9b175637-7535-40c2-bff6-c2c3c4b0a47f","name":"clean-shoe"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n    - starterCard : StarterCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + changeStarterSide()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-55.65161099574113,"y":162.45525479580164},"zoom":1.172295999151358,"editorMode":"code"},"time":1710063942723,"type":"auto","id":"349d325c-ada7-412b-aa25-2edd814464ed","name":"clean-arm"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n    + changeStarterSide()\n}\n\nclass PlayerView{\n    + setStarterCardChoice() void\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-343.4065321067294,"y":-18.425335597303775},"zoom":1.4767717123031616,"editorMode":"code"},"time":1710063882723,"type":"auto","id":"8f48f7f1-8f72-471b-b0db-5049db4c4dc6","name":"better-potato"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass PlayerView{\n    + set\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-343.4065321067294,"y":-18.425335597303775},"zoom":1.4767717123031616,"editorMode":"code"},"time":1710063702713,"type":"auto","id":"e96bd1dd-b607-4cb7-8773-a5903a4d17b6","name":"attractive-oyster"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass Player\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-343.4065321067294,"y":-18.425335597303775},"zoom":1.4767717123031616,"editorMode":"code"},"time":1710063642715,"type":"auto","id":"7900e0e8-8b12-4270-9794-bfd087455257","name":"cold-easter"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n    + update()\n}\n\nclass GameController{\n    + intializeGame() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-343.4065321067294,"y":-18.425335597303775},"zoom":1.4767717123031616,"editorMode":"code"},"time":1710063522713,"type":"auto","id":"e4af1c98-b6a8-4183-a544-902bfec8e642","name":"gentle-oxygen"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1\" GameView\nGameController*-->\"1 ... n\" PlayerModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-343.4065321067294,"y":-18.425335597303775},"zoom":1.4767717336049373,"editorMode":"code"},"time":1710063462718,"type":"auto","id":"981162b6-097d-407f-bc2c-39b7a36ef117","name":"tight-terabyte"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame() void\n}\n\nGameController*-->\"1\" GameModel\nGameController*-->\"1 ... n\" PlayerModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-396.7674110185443,"y":42.00423655747425},"zoom":1.4767723083496094,"editorMode":"code"},"time":1710063402714,"type":"auto","id":"d2aac76f-bf01-43e8-b103-947476dbd217","name":"careful-keyboard"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleResourceCards() void\n    + restoreVisibleGoldenCards() void\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame() void\n}\n\nGameController*-->\"1\" GameModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-415.76751632735613,"y":50.00421279912506},"zoom":1.476772260118076,"editorMode":"code"},"time":1710063342713,"type":"auto","id":"7ba38924-b993-494f-93c9-d44c716043c7","name":"rhythmic-megabyte"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleAllDecks() void\n    + restoreVisibleCards(deck : List ~ Card ~)\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame() void\n}\n\nGameController*-->\"1\" GameModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-1153.8941397438707,"y":-371.5185989183756},"zoom":2.0208241939544678,"editorMode":"code"},"time":1710063282714,"type":"auto","id":"ee4311c8-9578-41a6-a75f-847d773500eb","name":"yellow-camera"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleDeck(deck: List ~ Card ~)\n    + restoreVisibleCards(deck : List ~ Card ~)\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n\nGameController*-->\"1\" GameModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-1229.2949874906174,"y":-379.1668000366974},"zoom":2.1856584014701474,"editorMode":"code"},"time":1710063222713,"type":"auto","id":"fc3f1549-1965-4eaa-b485-a5c534257691","name":"flat-zoo"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleDeck(deck: List ~ Card ~)\n    + restoreVisibleCards(deck : List ~ Card ~)\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n\nGameController*--> GameModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-1189.4781888233501,"y":-185.2075759980913},"zoom":2.3639378547668457,"editorMode":"code"},"time":1710063163190,"type":"auto","id":"378788ce-8b3c-4588-b762-810b0f8a4fbd","name":"hallowed-tomato"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleDeck(deck: List ~ Card ~)\n    + restoreVisibleCards(deck : List ~ Card ~)\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-1346.6719337434624,"y":14.591996130748743},"zoom":2.3639385708017775,"editorMode":"code"},"time":1710063102714,"type":"auto","id":"97250445-ded5-4f5e-a458-337a83ce31b7","name":"obnoxious-airport"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleDeck(deck: List ~ Card ~)\n    + restoreVisibleCards(deck : List ~ Card ~)\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-1081.1291218047702,"y":41.5130409669588},"zoom":2.18565923363164,"editorMode":"code"},"time":1710063042724,"type":"auto","id":"4179a1d4-95ac-4680-8d17-a2be56762aef","name":"billowy-controller"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleDeck(deck: List ~ Card ~)\n    + restoreVisibleCards(deck : List ~ Card ~)\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-2617.4801088783443,"y":-201.75717105769817},"zoom":3.4986859603076823,"editorMode":"code"},"time":1710062862713,"type":"auto","id":"67a75644-ea59-4251-8285-a2a507dc078c","name":"brash-match"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleDeck(deck: List ~ Card ~)\n    + restoreVisibleCards(deck : List ~ Card ~)\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-530.4340675044878,"y":55.5649168621042},"zoom":1.5903117656707764,"editorMode":"code"},"time":1710062803266,"type":"auto","id":"097ebf6c-fa04-4714-b40a-63842a7c7995","name":"damaged-arm"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ ObjectiveCard ~\n    - commonObjectives : List ~ ObjectiveCard ~\n\n    - starterCardDeck : List ~ Card ~\n\n    + initializeDecks() void\n    + shuffleDeck(deck: List ~ Card ~)\n    + restoreVisibleCards(deck : List ~ Card ~)\n    + drawCard(deck : List ~ Card ~)\n    + flipStarterCard(player: PlayerModel)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : PlayerModel)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-620.4341751695987,"y":75.56489700172757},"zoom":1.5903117656707764,"editorMode":"code"},"time":1710062742724,"type":"auto","id":"34c9ace3-089e-45e1-9802-6337764f9fc3","name":"raspy-ad"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ Card ~\n    - resourceCardDeck : List ~ Card ~\n\n    - visibleGoldenCards : List ~ Card ~\n    - goldenCardDeck : List ~ Card ~\n\n    - objectiveCardDeck : List ~ Card ~\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initializeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-505.43419634491903,"y":110.56497562223147},"zoom":1.5903117656707764,"editorMode":"code"},"time":1710062682719,"type":"auto","id":"ad5b5212-ee0a-4543-a18a-4f41c25f27f4","name":"glamorous-cpu"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ PlayerModel ~\n\n    - visibleResourceCards : List ~ ResourceCard ~\n    - resourceCardDeck : List ~ ResourceCard ~\n\n    - visibleGoldenCards : List ~ GoldenCard ~\n    - goldenCardDeck : List ~ GoldenCard ~\n\n    - objectiveCardDeck : List ~ ResourceCard ~\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initializeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-505.43419634491903,"y":110.56497562223147},"zoom":1.5903117656707764,"editorMode":"code"},"time":1710062622731,"type":"auto","id":"892b1341-9b09-48f9-9609-1618fdd6b24d","name":"lemon-church"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List ~ \n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initializeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-505.43419634491903,"y":110.56497562223147},"zoom":1.5903117656707764,"editorMode":"code"},"time":1710062563046,"type":"auto","id":"ed6bb440-b52e-4dd6-84c9-16abcd5078fc","name":"alert-nigeria"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap ~ Position, Card ~\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-505.43419634491903,"y":110.56497562223147},"zoom":1.5903117656707764,"editorMode":"code"},"time":1710062502729,"type":"auto","id":"22aa72ef-0266-4e97-84ec-11875a2cecdc","name":"uninterested-belgium"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap \\Position, Card/\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-505.43419634491903,"y":110.56497562223147},"zoom":1.5903117656707764,"editorMode":"code"},"time":1710062443287,"type":"auto","id":"cbe3f5f7-ae3d-4c72-b1c4-f61c7d4141f4","name":"colossal-action"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap \\Position, Card\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-505.43419634491903,"y":110.56497562223147},"zoom":1.5903117656707764,"editorMode":"code"},"time":1710062382722,"type":"auto","id":"eeddfff1-a0c3-4f9d-a9e5-333d4d4e7eca","name":"clever-nurse"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : HashMap <Position, Card>\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-505.43419634491903,"y":110.56497562223147},"zoom":1.5903117656707764,"editorMode":"code"},"time":1710062322716,"type":"auto","id":"d2d4352a-0834-4210-a0ee-0bd4b8c16104","name":"lemon-room"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-505.43419634491903,"y":110.56497562223147},"zoom":1.5903118112895671,"editorMode":"code"},"time":1710062202717,"type":"auto","id":"2a0deec7-b8eb-48e0-869d-af0e6ea449fd","name":"elegant-toothbrush"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-567.4342230246145,"y":122.56497898163998},"zoom":1.5903118112895671,"editorMode":"code"},"time":1710062142722,"type":"auto","id":"7f48b9d0-a70f-444b-b480-2ea3ad435581","name":"wooden-printer"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-602.6051400127888,"y":194.55275812161213},"zoom":1.3594863414764404,"editorMode":"code"},"time":1709888735530,"type":"auto","id":"65b520c2-28b8-420c-b538-6cb222f48a8c","name":"small-morning"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-306.0843901838656,"y":21.821986560904826},"zoom":1.293406606535271,"editorMode":"code"},"time":1709887744823,"type":"auto","id":"e0bc2943-c6ea-496e-bc38-faefe0ed2d62","name":"massive-lizard"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":16.885837613754518,"y":-127.75929635702849},"zoom":1.398906946182251,"editorMode":"code"},"time":1709887684824,"type":"auto","id":"113c196c-4325-48c2-bbb7-3848c95a93dd","name":"ugly-ability"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-425.1141890172551,"y":74.2407042362529},"zoom":1.398906946182251,"editorMode":"code"},"time":1709885165514,"type":"auto","id":"bd1e8f58-5e9b-4880-8034-766adb0424e9","name":"fierce-traffic"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-425.1141890172551,"y":74.2407042362529},"zoom":1.398906946182251,"editorMode":"code"},"time":1709848730781,"type":"auto","id":"95e5b43a-6337-4e00-ba60-10528c96212c","name":"aggressive-iron"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-425.1141890172551,"y":74.2407042362529},"zoom":1.398906946182251,"editorMode":"code"},"time":1709847770773,"type":"auto","id":"785fd57b-30a9-4588-bd44-102819d4396b","name":"sour-analyst"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":26.885903126857443,"y":50.24070130581339},"zoom":1.398906946182251,"editorMode":"code"},"time":1709846990775,"type":"auto","id":"170ebeae-937c-4308-8375-2bbefdfcfe0b","name":"harsh-father"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":136.8858093909501,"y":-77.75928475986261},"zoom":1.398906946182251,"editorMode":"code"},"time":1709846930773,"type":"auto","id":"24cd21d7-24d4-4ae2-8878-aa3f455a147f","name":"strong-easter"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - playersList : List\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-297.11429164158335,"y":44.240678400702464},"zoom":1.398906946182251,"editorMode":"code"},"time":1709846870780,"type":"auto","id":"9f9741fa-388f-4079-ab62-64d3855f228f","name":"broad-apple"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-297.11429164158335,"y":44.240678400702464},"zoom":1.398906970612612,"editorMode":"code"},"time":1709846810771,"type":"auto","id":"e6486029-0002-445d-ac72-13ad26ecbc66","name":"brave-kilobyte"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-29.114291192187373,"y":-33.7592992266576},"zoom":1.398906970612612,"editorMode":"code"},"time":1709846690776,"type":"auto","id":"df8284b6-fa95-48c6-8ffb-44c11152244a","name":"abnormal-london"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-533.221246141944,"y":46.890006031129516},"zoom":1.5096419647686616,"editorMode":"code"},"time":1709845850774,"type":"auto","id":"c1455c19-deb5-41b1-a1f7-5ad6eb065c20","name":"orange-eventide"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-523.2212165336424,"y":-13.109980197581763},"zoom":1.5096419647686616,"editorMode":"code"},"time":1709845430776,"type":"auto","id":"1c2cb0b1-2cda-48e9-ac68-3abe7c0398e6","name":"rancid-candle"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-553.2212096479981,"y":42.89002290097364},"zoom":1.5096419647686616,"editorMode":"code"},"time":1709845010772,"type":"auto","id":"cb27eeb1-32e7-4add-bf43-125f9bcc7e0e","name":"green-pencil"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-457.3474867738918,"y":57.0873799273095},"zoom":1.395790457725525,"editorMode":"code"},"time":1709844110785,"type":"auto","id":"b25c8f23-03a2-4290-af63-1e912eda9bc1","name":"damaged-toddler"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x : int, y : int)\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-453.3474523879318,"y":-43.91264764018625},"zoom":1.395790457725525,"editorMode":"code"},"time":1709844050784,"type":"auto","id":"33d22acd-8f17-4ddc-a875-3cb89e8c0dae","name":"puny-holiday"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n\n    + drawCard(card : Card)\n    + placeCard(card : Card, x)\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-311.34738208781766,"y":44.08735666535996},"zoom":1.395790457725525,"editorMode":"code"},"time":1709843990777,"type":"auto","id":"72e53373-2c5a-42d8-b69d-88ef0e30fd4c","name":"large-bed"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass PlayerModel{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-311.34738208781766,"y":44.08735666535996},"zoom":1.395790457725525,"editorMode":"code"},"time":1709843930775,"type":"auto","id":"b0a7a2d3-70d3-418f-bf8a-1234afc3e33f","name":"broken-arm"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-403.3473381078324,"y":70.0873742802338},"zoom":1.395790457725525,"editorMode":"code"},"time":1709843810783,"type":"auto","id":"c15fb91e-db40-4dbe-909a-5239ff6f6c66","name":"scruffy-pizza"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n    + placeCard(card : Card, player : Player)\n    + selectToken(token )\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-403.3473381078324,"y":70.0873742802338},"zoom":1.395790457725525,"editorMode":"code"},"time":1709843750777,"type":"auto","id":"b13064dc-242d-45f3-9be6-574e33e85d22","name":"wonderful-balloon"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + placeCard(card : Card, player : Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-58.32486076876461,"y":-161.49932497757865},"zoom":1.3957905185566317,"editorMode":"code"},"time":1709843630774,"type":"auto","id":"ea5f45dc-57c8-4b0a-aeca-00e71a0aa799","name":"howling-brother"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + placeCard(card : Card, player : Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-246.32481914867003,"y":-223.49932007323298},"zoom":1.3957905185566317,"editorMode":"code"},"time":1709843570776,"type":"auto","id":"613ebc5b-d490-4ba2-95c8-c29c32c99dd4","name":"flaky-elephant"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + placeCard(card : Card, player : Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-84.32487951676686,"y":-213.4993164061143},"zoom":1.3957905185566317,"editorMode":"code"},"time":1709843390774,"type":"auto","id":"4cd6aea5-8d32-47d6-9bd0-d357eea548d5","name":"antsy-coffeeshop"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + placeCard(card : Card, player : Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-52.324941489937345,"y":-67.49929972015704},"zoom":1.3957905185566317,"editorMode":"code"},"time":1709843330777,"type":"auto","id":"4de1caf4-7a3e-452c-910d-f4c71fe3cb8e","name":"flat-gigabyte"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + placeCard(card : Card, player : Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-600.3248476162389,"y":28.500698630206955},"zoom":1.3957905185566317,"editorMode":"code"},"time":1709843270787,"type":"auto","id":"09061f75-bb50-4afe-942c-85a96e1b39aa","name":"purple-leather"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + placeCard(card : Card, player : Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":226.54354529972022,"y":-158.96510352492618},"zoom":1.3160731348809809,"editorMode":"code"},"time":1709843210780,"type":"auto","id":"f7115d5f-e8ad-4ce6-a036-549e7b5aa66c","name":"careful-psychiatrist"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    + canPlace() bool\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + placeCard(card : Card, player : Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-224.7766010002413,"y":-357.34499516891043},"zoom":1.6651036739349365,"editorMode":"code"},"time":1709843150782,"type":"auto","id":"ad19c127-6bd5-44f6-af40-4a80239b5076","name":"purple-psychiatrist"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + placeCard(card : Card, player : Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-166.7765519386855,"y":-219.34500729866846},"zoom":1.6651036406788138,"editorMode":"code"},"time":1709843030780,"type":"auto","id":"00b4ce93-35ef-47b7-bdc8-777faeb48ca5","name":"massive-vegetable"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + placeCard(card : Card, player : Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-246.7765538933754,"y":-451.34503507951024},"zoom":1.6651037702871037,"editorMode":"code"},"time":1709842970780,"type":"auto","id":"a1665532-1cf0-42ba-b47a-59ec3d36be27","name":"worried-uganda"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + placeCard(card : Card, player : Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-661.073975373292,"y":53.59822340658464},"zoom":1.8009226322174072,"editorMode":"code"},"time":1709842730773,"type":"auto","id":"1a4d7b3a-0066-49ce-a84a-49d57afbb45d","name":"slimy-book"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + placeCard()\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-661.073975373292,"y":53.59822340658464},"zoom":1.8009226322174072,"editorMode":"code"},"time":1709842670784,"type":"auto","id":"d45f18ed-5170-4695-a50e-9871ff8e8723","name":"stocky-energy"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : List\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-661.073975373292,"y":53.59822340658464},"zoom":1.8009226322174072,"editorMode":"code"},"time":1709842370787,"type":"auto","id":"df719765-bbdc-43f9-b454-b9b488a97485","name":"huge-pencil"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-661.073975373292,"y":53.59822340658464},"zoom":1.8009226295927145,"editorMode":"code"},"time":1709842310787,"type":"auto","id":"e01beb88-29ce-4654-aff0-ea829d4abc70","name":"broken-parrot"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-272.78671516060945,"y":61.475232388859304},"zoom":1.16949109145027,"editorMode":"code"},"time":1709842070776,"type":"auto","id":"7a2744cd-9438-40fa-82ad-6abaaac04460","name":"itchy-lunch"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":79.21327960218315,"y":13.475243672002563},"zoom":1.16949109145027,"editorMode":"code"},"time":1709827611352,"type":"auto","id":"182891d5-26c6-4978-b7db-ca17c1acc360","name":"abundant-jewellery"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":29.213330108378955,"y":33.475277723614454},"zoom":1.16949109145027,"editorMode":"code"},"time":1709826531360,"type":"auto","id":"9e449260-66b2-49fc-940a-51bd903a2ef5","name":"drab-insurance"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-44.78669124969677,"y":37.47527678335251},"zoom":1.16949109145027,"editorMode":"code"},"time":1709825271352,"type":"auto","id":"eab925f4-1a38-4cc4-b31c-8e4eb76d1c84","name":"sweet-train"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-364.79162466750296,"y":101.08925642849871},"zoom":1.264883914355846,"editorMode":"code"},"time":1709824911357,"type":"auto","id":"0318bdf6-1efd-44df-81f7-e8a599d9323d","name":"easy-quill"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-250.79165092827367,"y":111.08924530094077},"zoom":1.264883914355846,"editorMode":"code"},"time":1709824431356,"type":"auto","id":"9166ae46-444c-4d9f-9679-1889932b26f3","name":"fierce-oyster"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-37.71630787304002,"y":-182.2378686321925},"zoom":1.264883963583844,"editorMode":"code"},"time":1709824190771,"type":"auto","id":"8e0b981d-7016-4f2d-a402-ed61874db48d","name":"scarce-dusk"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":139.28372001019014,"y":-32.23786205206419},"zoom":1.264883963583844,"editorMode":"code"},"time":1709824011357,"type":"auto","id":"c55f3642-26e0-43b1-92be-49578b98ffd6","name":"fresh-zoo"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-282.9907065977046,"y":50.84332337137355},"zoom":1.3680577738132373,"editorMode":"code"},"time":1709823951362,"type":"auto","id":"9b8e07aa-6ab6-4a26-aecd-8e76a0d3a782","name":"helpless-king"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-106.9907860045016,"y":33.8433418593885},"zoom":1.3680577738132373,"editorMode":"code"},"time":1709823771350,"type":"auto","id":"56a7f7d9-7580-46ea-8d65-3c5cf30eff9f","name":"callous-airplane"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-523.9907044995017,"y":51.84334095026563},"zoom":1.3680577738132373,"editorMode":"code"},"time":1709823710777,"type":"auto","id":"92ab3c7b-7b6b-4a07-80cb-370af2e0b459","name":"aloof-summer"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":49.27751383219194,"y":78.3416270119561},"zoom":0.924348549848995,"editorMode":"code"},"time":1709823050778,"type":"auto","id":"2915a1fc-a0ee-49f9-bebc-4610a3dc4cdb","name":"thoughtless-keyboard"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":8.965805808671092,"y":101.4219190169955},"zoom":1.1694914555735703,"editorMode":"code"},"time":1709822930785,"type":"auto","id":"5a550992-5c5d-4141-b6c1-94e8803b8c81","name":"repulsive-garage"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\n%% class ResourceCard{\n%%     - cardType : ResourceType\n%% }\n\n%% class GoldenCard{\n%%     - cardType : ResourceType\n%% }\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard \"cardType\"*-->\"1\" ResourceType\nGoldenCard \"cardType\"*-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":25.054738124071086,"y":-79.32376322019698},"zoom":1.4796479940414429,"editorMode":"code"},"time":1709822870964,"type":"auto","id":"d3b065a7-462c-4b70-bdf0-81eca2905a77","name":"raspy-waitress"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nResourceCard *-->\"1\" ResourceType\nGoldenCard *-->\"1\" ResourceType\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":124.69153793889012,"y":-226.11503413557625},"zoom":1.6356818675994873,"editorMode":"code"},"time":1709822811003,"type":"auto","id":"d64ac2ff-256c-4805-a50e-c59f78a087a5","name":"beefy-russia"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":5.537095576584576,"y":-68.46760841780988},"zoom":1.7691007818538045,"editorMode":"code"},"time":1709822750781,"type":"auto","id":"780e6069-eeb9-4150-89e3-b44171b45e37","name":"hundreds-rain"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipStarterCard(player: Player)\n    + flipCard(card : Card)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-334.1539596635223,"y":164.10333356518083},"zoom":1.1953197717666626,"editorMode":"code"},"time":1709812966606,"type":"auto","id":"442f55c3-ebb2-498b-be7e-975c43a5e789","name":"silly-coffeeshop"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n    + flipCard(player: Player)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-334.1539596635223,"y":164.10333356518083},"zoom":1.1953197717666626,"editorMode":"code"},"time":1709809315281,"type":"auto","id":"650e3342-927f-4c2b-a032-2a4bfff129a1","name":"noisy-cricket"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-129.25716942843525,"y":217.52582121061218},"zoom":1.0555820585012605,"editorMode":"code"},"time":1709809255275,"type":"auto","id":"493fc1e8-d285-4a3b-b252-336b74b07ea4","name":"quiet-rocket"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n}\n\nclass GameView{\n    + flipStarterCard()\n}\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-810.5340077427177,"y":81.098524194571},"zoom":1.7111972570419312,"editorMode":"code"},"time":1709809136387,"type":"auto","id":"dc998a81-9fb0-490a-8c85-3ec995a0beea","name":"plump-lunch"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - objectiveCardDeck : List\n    - commonObjectives : List\n\n    - starterCardDeck : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n}\n\n%% class GameView{\n\n%% }\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-810.5340077427177,"y":81.098524194571},"zoom":1.7111972570419312,"editorMode":"code"},"time":1709809075290,"type":"auto","id":"1d1b4f57-9179-4f29-a6c6-69677d6f026e","name":"helpless-shampoo"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    \n    - commonObjectives : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n}\n\n%% class GameView{\n\n%% }\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-810.5340077427177,"y":81.098524194571},"zoom":1.7111972570419312,"editorMode":"code"},"time":1709809015280,"type":"auto","id":"61d70f16-da79-43d3-aab3-da1f5cf08112","name":"adamant-accident"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + initizlizeDecks() void\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n}\n\n%% class GameView{\n\n%% }\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-810.5340077427177,"y":81.098524194571},"zoom":1.7111972570419312,"editorMode":"code"},"time":1709808955287,"type":"auto","id":"286da28a-b5f7-4b76-b9f7-23cc4e4854dd","name":"puny-balloon"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n}\n\n%% class GameView{\n\n%% }\n\nclass GameController{\n    + intializeGame()\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-264.51684202106975,"y":152.10962705925607},"zoom":1.224094271659851,"editorMode":"code"},"time":1709808895281,"type":"auto","id":"21ff062f-2509-4fb9-b51d-306ac0602e2b","name":"clever-rain"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n}\n\n%% class GameView{\n\n%% }\n\n%% class GameController{\n\n%% }\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-264.51684202106975,"y":152.10962705925607},"zoom":1.2240942619317041,"editorMode":"code"},"time":1709808835275,"type":"auto","id":"530b0008-7277-4315-92f1-f6823f85e9b9","name":"slow-australia"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n}\n\n%% class GameView{\n\n%% }\n\n%% class GameController{\n\n%% }\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-434.51693028019895,"y":105.10964219198505},"zoom":1.2240942619317041,"editorMode":"code"},"time":1709808775283,"type":"auto","id":"ef970104-1a29-43dc-99c7-595edeb9b029","name":"clever-microphone"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n}\n\n%% class GameView{\n\n%% }\n\n%% class GameController{\n\n%% }\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-635.8452858348342,"y":-0.4674293122566979},"zoom":1.5046323909159942,"editorMode":"code"},"time":1709808535274,"type":"auto","id":"e72886e4-1e90-4575-b57e-bb2d3de02a3d","name":"whining-nigeria"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    + copyDeck(deck : List) List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n}\n\n%% class GameView{\n\n%% }\n\n%% class GameController{\n\n%% }\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-434.6686709019583,"y":79.96294041598372},"zoom":1.179836630821228,"editorMode":"code"},"time":1709808475274,"type":"auto","id":"61d3c9ef-df59-42e9-8cac-6237788b8857","name":"adventurous-branch"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n}\n\n%% class GameView{\n\n%% }\n\n%% class GameController{\n\n%% }\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-434.6686709019583,"y":79.96294041598372},"zoom":1.179836630821228,"editorMode":"code"},"time":1709808415279,"type":"auto","id":"46893c3a-24f8-4887-93f0-ebe5fe6d8ae0","name":"abnormal-advertisement"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameModel{\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n}\n\n%% class GameView{\n\n%% }\n\n%% class GameController{\n\n%% }\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-434.6686709019583,"y":79.96294041598372},"zoom":1.179836630821228,"editorMode":"code"},"time":1709808295289,"type":"auto","id":"570428c6-3155-4fae-9ba1-c4dc70b5cc7e","name":"zealous-artist"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{ \n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : List, player : Player)\n}\n\n%% class GameView{\n\n%% }\n\n%% class GameController{\n\n%% }\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-434.6686709019583,"y":79.96294041598372},"zoom":1.1798365899988974,"editorMode":"code"},"time":1709808235279,"type":"auto","id":"b0088230-30f9-447e-bc1b-204d5315097f","name":"hallowed-hydrogen"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{ \n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + drawCard(deck : , player : Player)\n}\n\n%% class GameView{\n\n%% }\n\n%% class GameController{\n\n%% }\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-5.470479731539086,"y":125.27676893812443},"zoom":0.9353793263435364,"editorMode":"code"},"time":1709808175274,"type":"auto","id":"15b7c266-4641-43b9-9927-28e15e563dda","name":"small-salesclerk"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{ \n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n    + giveCard()\n}\n\n%% class GameView{\n\n%% }\n\n%% class GameController{\n\n%% }\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-5.470479731539086,"y":125.27676893812443},"zoom":0.9353793263435365,"editorMode":"code"},"time":1709808115281,"type":"auto","id":"912c48ad-08e8-4d88-abf9-a1ab9d1dd032","name":"numerous-sandwich"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{ \n    <<singleton>>\n    - players : List\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n\n%% class GameView{\n\n%% }\n\n%% class GameController{\n\n%% }\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-5.470479731539086,"y":125.27676893812443},"zoom":0.9353793263435365,"editorMode":"code"},"time":1709808055280,"type":"auto","id":"de808c4c-3a73-479b-ac5e-374c5a4cf86a","name":"yummy-mechanic"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{ \n    <<singleton>>\n    - players :\n\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n\n%% class GameView{\n\n%% }\n\n%% class GameController{\n\n%% }\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-5.470479731539086,"y":125.27676893812443},"zoom":0.9353793263435365,"editorMode":"code"},"time":1709807995285,"type":"auto","id":"bf7e9fe6-45fe-47b1-ae59-8e38babf6b48","name":"bored-england"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{ \n    <<singleton>>\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n\n%% class GameView{\n\n%% }\n\n%% class GameController{\n\n%% }\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-5.470479731539086,"y":125.27676893812443},"zoom":0.9353793263435365,"editorMode":"code"},"time":1709807755276,"type":"auto","id":"4c392123-7c66-45c2-b1b6-8335fc547464","name":"arrogant-psychiatrist"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{ singleton\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n\n    - tokens : List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n\n%% class GameView{\n\n%% }\n\n%% class GameController{\n\n%% }\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-172.79264326328314,"y":154.29015216138384},"zoom":1.0966510772705078,"editorMode":"code"},"time":1709807696230,"type":"auto","id":"44feee1d-4774-46c1-a195-97401e95245b","name":"fierce-architect"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - starterDeck : List\n\n    - objectiveDeck : List\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n\n%% class GameView{\n\n%% }\n\n%% class GameController{\n\n%% }\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-172.79264326328314,"y":154.29015216138384},"zoom":1.0966510772705078,"editorMode":"code"},"time":1709807635280,"type":"auto","id":"6e7a5a7d-0713-40f4-883f-bb505bcad645","name":"mushy-king"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameResources{\n    - goldenDeck : List\n    - resourcesDeck : List\n\n    - \n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n\n%% class GameView{\n\n%% }\n\n%% class GameController{\n\n%% }\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-417.79259651150727,"y":116.2901360000524},"zoom":1.0966510772705078,"editorMode":"code"},"time":1709807575852,"type":"auto","id":"1bee23db-6184-40bc-9462-bbfa94ff6edf","name":"magnificent-argument"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n\n%% class GameView{\n\n%% }\n\n%% class GameController{\n\n%% }\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-417.79259651150727,"y":116.2901360000524},"zoom":1.0966510772705078,"editorMode":"code"},"time":1709807515278,"type":"auto","id":"04dc5832-bd58-44ea-a861-52f7b27db4ed","name":"salmon-megabyte"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass GameModel{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n\n%% class GameView{\n\n%% }\n\n%% class GameController{\n\n%% }\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-425.7926047649928,"y":179.290126028035},"zoom":1.0966510772705078,"editorMode":"code"},"time":1709806975859,"type":"auto","id":"23c414c8-1429-457c-af93-c11038e189d3","name":"sharp-xylophone"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n\nclass GameModel{\n\n}\n\nclass GameView{\n\n}\n\nclass GameController{\n    \n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-139.79263099523922,"y":187.29013428152052},"zoom":1.0966510772705078,"editorMode":"code"},"time":1709806915289,"type":"auto","id":"2e6d573b-1ffa-4f7b-aa3c-0483240a60c7","name":"short-knife"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n\nclass GameModel\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-52.792698066520785,"y":35.290131270623974},"zoom":1.0966510772705078,"editorMode":"code"},"time":1709806855286,"type":"auto","id":"997b8754-d099-4ac1-b280-4453461f0741","name":"incalculable-hair"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n\nclass ","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-52.792698066520785,"y":35.290131270623974},"zoom":1.0966510772705078,"editorMode":"code"},"time":1709806795283,"type":"auto","id":"950da7a0-f05c-40d6-805e-226ec1d12ef6","name":"damaged-answer"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - xPos : int\n    - yPos : int\n\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-52.792698066520785,"y":35.290131270623974},"zoom":1.0966510569455918,"editorMode":"code"},"time":1709806615278,"type":"auto","id":"519ae4c2-ddbc-4e1b-8725-43653a92fd77","name":"sharp-stone"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n<Space\n    - topCard : Card\n    - bottomCard : Card\n    - leftCard : Card\n    - rightCard : Card\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-183.23438254411613,"y":-50.413690290313184},"zoom":1.545145034790039,"editorMode":"code"},"time":1709806555781,"type":"auto","id":"1145ca1f-d19a-4446-9f4a-4e63eeb02c58","name":"astonishing-branch"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    - top \n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard : Card\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-415.2344097134153,"y":-345.41365823477423},"zoom":1.545145034790039,"editorMode":"code"},"time":1709806495364,"type":"auto","id":"5d4350e2-0298-449b-b0d6-51d0412196f5","name":"mysterious-denmark"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass VisibleCorner{\n    connectedCard\n}\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-381.2580222051547,"y":-308.48982806264576},"zoom":1.5673742294311523,"editorMode":"code"},"time":1709806435360,"type":"auto","id":"b5019a49-ebc9-4211-972b-fb1c28bbf3d5","name":"chubby-barista"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-82.25798137739531,"y":-129.4898725639133},"zoom":1.5673741771533554,"editorMode":"code"},"time":1709806375275,"type":"auto","id":"46688f6b-0bd7-48ce-9d5d-df40aaba6a30","name":"shrilling-secretary"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-817.5268447079596,"y":-542.0572612818286},"zoom":2.158443145850656,"editorMode":"code"},"time":1709806315282,"type":"auto","id":"a5db4b1c-0004-4295-921b-4619da478f2e","name":"deafening-shampoo"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-630.741791779615,"y":-407.67117189636997},"zoom":1.878434834067307,"editorMode":"code"},"time":1709806255274,"type":"auto","id":"84c045f8-0717-4eca-aeac-fda3b947da06","name":"flat-processor"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-665.8477920509968,"y":5.693988877176089},"zoom":1.6452065471500394,"editorMode":"code"},"time":1709805835275,"type":"auto","id":"adf9eb94-4283-46af-a644-ebf50c2bab8e","name":"chilly-hamburger"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-695.8478190721985,"y":-42.30602012811442},"zoom":1.6452065471500394,"editorMode":"code"},"time":1709804455274,"type":"auto","id":"a328e65e-46fe-42d3-aa3c-0b53c1d60d30","name":"thousands-camera"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":79.33373243030627,"y":14.128944269335229},"zoom":0.8279329538345337,"editorMode":"code"},"time":1709803495284,"type":"auto","id":"089c563d-ad51-49ff-ae8f-b53ebb4fdf4f","name":"odd-xylophone"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + restoreVisibleCards(deck : List)\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":79.33373243030627,"y":14.128944269335229},"zoom":0.8279329538345337,"editorMode":"code"},"time":1709719428343,"type":"auto","id":"8a58f3e3-35d1-4564-8439-460e5daf6f3d","name":"salmon-nightfall"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n    + fillVisibleCards(deck : List)\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":79.33373243030627,"y":14.128944269335229},"zoom":0.8279329538345338,"editorMode":"code"},"time":1709719188341,"type":"auto","id":"a4eb1935-ee43-4c9e-8a49-3bde39071688","name":"miniature-salesclerk"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List)\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":79.33373243030627,"y":14.128944269335229},"zoom":0.8279329538345336,"editorMode":"code"},"time":1709719068342,"type":"auto","id":"1b46ff2e-8a5e-4628-bc32-3c794719abee","name":"fast-bit"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n\n    - commonObjectives : List\n\n    + shuffleDeck(deck: List<card>)\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":79.33373243030627,"y":14.128944269335229},"zoom":0.8279329538345336,"editorMode":"code"},"time":1709719008330,"type":"auto","id":"ac643089-ba12-42a5-9494-0bdcd7ba6db9","name":"high-airport"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n    - commonObjectives : List\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":79.33373243030627,"y":14.128944269335229},"zoom":0.8279329538345336,"editorMode":"code"},"time":1709718948703,"type":"auto","id":"4a2aa830-cc14-4069-a593-845300073741","name":"low-mouse"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n    - visibleResourceCards : List\n    - resourceCardDeck : List\n    - visibleGoldenCards : List\n    - goldenCardDeck : List\n    - commonObject\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":79.33373243030627,"y":14.128944269335229},"zoom":0.8279329538345336,"editorMode":"code"},"time":1709718888587,"type":"auto","id":"4384d5a1-be4c-48e3-a843-d53e7130da41","name":"puny-garden"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n    - visibleResourceCard : List\n    - resourceCardDeck : List\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":79.33373243030627,"y":14.128944269335229},"zoom":0.8279329538345337,"editorMode":"code"},"time":1709718828330,"type":"auto","id":"4a40b7c7-ef83-4aa5-91b8-c3a7493c0be6","name":"repulsive-dress"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n\nclass Table{\n    - board\n    \n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":79.33373243030627,"y":14.128944269335229},"zoom":0.8279329538345336,"editorMode":"code"},"time":1709718648339,"type":"auto","id":"45ae487e-163c-4860-a948-03d0c1f15381","name":"deep-dentist"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":79.33373243030627,"y":14.128944269335229},"zoom":0.8279329750970942,"editorMode":"code"},"time":1709712828335,"type":"auto","id":"a1ddbf10-eaa3-45f1-80a6-e3cea1937cdc","name":"elegant-flower"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-665.362226513639,"y":-463.18477196930235},"zoom":1.4272512547472398,"editorMode":"code"},"time":1709712648342,"type":"auto","id":"6c3411cc-7f92-46ab-b31e-f9931445d9a8","name":"purring-dress"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":15.796162963918071,"y":9.11492099187508},"zoom":1.0242993831634521,"editorMode":"code"},"time":1709712528331,"type":"auto","id":"dbddd2cc-59a4-4480-90b0-86d17f01e622","name":"hollow-tiger"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-22.203831196093972,"y":-2.8850649502094505},"zoom":1.0242993831634521,"editorMode":"code"},"time":1709712468337,"type":"auto","id":"097b6850-9bd8-42be-b813-7ef57284c51d","name":"bashful-furniture"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":0.7960993151492488,"y":1.1149613052142175},"zoom":1.0242993831634521,"editorMode":"code"},"time":1709711988331,"type":"auto","id":"26923fbf-3109-45ae-b881-22793a1991bd","name":"itchy-stone"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-16.203866985809043,"y":11.11497144129494},"zoom":1.0242993831634521,"editorMode":"code"},"time":1709651183496,"type":"auto","id":"a2819972-31de-4b0d-a8a9-5491b15d4784","name":"curved-megabyte"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-0.918568891694747,"y":74.85101536486269},"zoom":0.7420965433120726,"editorMode":"code"},"time":1709641817277,"type":"auto","id":"d7094860-32c7-4ead-a8d0-ba6c3bf5a9ce","name":"bad-baby"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-0.918568891694747,"y":74.85101536486269},"zoom":0.7420965705306614,"editorMode":"code"},"time":1709639862271,"type":"auto","id":"3322ac75-6321-4d4c-9412-1be43c7fb719","name":"defeated-army"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":true,"panZoom":true,"pan":{"x":-47.962748427530656,"y":-14.80462259713158},"zoom":1.005380392074585,"editorMode":"code"},"time":1709639682285,"type":"auto","id":"2a1347dd-1c11-4ca8-b683-29cf588eec56","name":"hissing-ocean"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective : ObjectiveCard\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-47.962748427530656,"y":-14.80462259713158},"zoom":1.0053804329735911,"editorMode":"code"},"time":1709635578288,"type":"auto","id":"91aaca78-c917-4bc0-9b72-86d38599c9bc","name":"sweet-nail"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints() int\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - objective :\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":75.65950043944481,"y":99.4938181938594},"zoom":0.6866883039474487,"editorMode":"code"},"time":1709635518286,"type":"auto","id":"b7709e2f-dcb9-4ee0-bd4a-78373ed99328","name":"nutritious-cpu"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - points : int\n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-181.50298755005787,"y":58.85874228067655},"zoom":1.1482315063476562,"editorMode":"code"},"time":1709635458292,"type":"auto","id":"9a46615a-b713-4c40-83a2-59f64a0ecd47","name":"bright-accident"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - \n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":17.496998876033647,"y":-132.1412467362232},"zoom":1.1482315063476562,"editorMode":"code"},"time":1709635398290,"type":"auto","id":"0626320c-d5ba-45b0-acd4-1476ca238b98","name":"uptight-belgium"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    \n\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":21.98112911279058,"y":-123.49267220995304},"zoom":1.123537302017212,"editorMode":"code"},"time":1709635338285,"type":"auto","id":"53017c04-dd42-4175-bd36-bd91aa7f67d4","name":"quiet-sundown"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":14.606546107801108,"y":-126.7688364742828},"zoom":1.1460514434068962,"editorMode":"code"},"time":1709635278283,"type":"auto","id":"9f292774-f5c4-4059-9a39-4d5d5bf3375d","name":"quick-tomato"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getPoints\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-104.13343008624837,"y":-76.20038256845373},"zoom":1.188333511352539,"editorMode":"code"},"time":1709635218294,"type":"auto","id":"59a96653-ba86-4df4-9f3a-d2a75747ae88","name":"powerful-television"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n\n    + getP\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-104.13343008624837,"y":-76.20038256845373},"zoom":1.188333511352539,"editorMode":"code"},"time":1709635158396,"type":"auto","id":"db80fb20-bdb0-426d-95de-01ef9d043d47","name":"fluffy-spring"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n}\n\nObjectiveCard *-->\"2\" ObjCardSide\n\nObjCardSide <|-- ObjCardFront\nObjCardSide <|-- ObjCardBack\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-104.13343008624837,"y":-76.20038256845373},"zoom":1.188333511352539,"editorMode":"code"},"time":1709635098287,"type":"auto","id":"832666f0-1f25-40cb-be65-86708a201f5c","name":"miniature-eggplant"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    - currSide : ObjCardSide\n}\n\nObjectiveCard *-->\"2\" ObjCardSide\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-104.13343008624837,"y":-76.20038256845373},"zoom":1.188333511352539,"editorMode":"code"},"time":1709635038283,"type":"auto","id":"32d0c3ef-13d9-4a1a-9dba-3e9a4932b948","name":"ripe-cpu"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    \n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-104.13343008624837,"y":-76.20038256845373},"zoom":1.188333511352539,"editorMode":"code"},"time":1709634978283,"type":"auto","id":"fb401f62-d776-4ef1-8992-1eee76d5f341","name":"hissing-waiter"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nclass ObjectiveCard{\n    \n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":165.86655757658554,"y":-20.20041164685395},"zoom":1.188333511352539,"editorMode":"code"},"time":1709634798282,"type":"auto","id":"96e6460c-bbe0-43fe-a86a-e2e784fd58b8","name":"abiding-eve"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n    - firstPlayerToken\n}","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":114.8665201275683,"y":-18.200375078820148},"zoom":1.188333511352539,"editorMode":"code"},"time":1709634678294,"type":"auto","id":"b0987568-1ba2-40c6-87e8-4b51c8e0f012","name":"yummy-painter"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n}","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":114.8665201275683,"y":-18.200375078820148},"zoom":1.188333565254468,"editorMode":"code"},"time":1709634618283,"type":"auto","id":"e99fa5fd-2343-427b-bb83-0b4011d23af6","name":"alert-traffic"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n}","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-19.133477086831846,"y":-31.20037399818293},"zoom":1.188333565254468,"editorMode":"code"},"time":1709634498293,"type":"auto","id":"a2b8d8ee-676d-4125-bb3c-5d4b40864eac","name":"bumpy-hairdresser"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n}","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":1.7243741984496168,"y":6.735259547721231},"zoom":0.9820938130095842,"editorMode":"code"},"time":1709634378295,"type":"auto","id":"130b69e1-9674-4244-89a2-9d705cd75811","name":"sparse-xylophone"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token\n}","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":36.5905216598386,"y":-1.1841356229667674},"zoom":0.9576501846313477,"editorMode":"code"},"time":1709634198292,"type":"auto","id":"40a6de86-6cd6-4e8d-ac08-7592c113f561","name":"angry-midnight"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - playArea : Card[][]\n\n    - token \n}","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":36.5905216598386,"y":-1.1841356229667674},"zoom":0.9576501846313477,"editorMode":"code"},"time":1709634138281,"type":"auto","id":"0ceb4c7e-18fd-4e35-94ef-fc42598b3469","name":"acidic-bit"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n\n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int\n\n    - currScore : int\n\n    - \n}","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":36.5905216598386,"y":-1.1841356229667674},"zoom":0.9576501846313477,"editorMode":"code"},"time":1709634078288,"type":"auto","id":"3fe8b80c-4216-449b-97bb-a0a3baf496b7","name":"elegant-quill"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n\n    - animalCount : int\n    - plantCount : int\n    - fungiCount : int\n    - insectCount : int\n    \n    - quillCount : int\n    - inkwellCount : int\n    - manuscriptCount : int \n}","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":36.5905216598386,"y":-1.1841356229667674},"zoom":0.9576501846313477,"editorMode":"code"},"time":1709634018288,"type":"auto","id":"d81c9fa9-cc5c-4b71-a6a4-bbf92a79a7ea","name":"thundering-coffeeshop"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    - hand : List Card\n    - animalRes : int\n    - plantRes : int\n    - Res : int\n    - animalRes : int\n    - animalRes : int\n    - animalRes : int\n    - animalRes : int \n}","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":36.5905216598386,"y":-1.1841356229667674},"zoom":0.9576501846313477,"editorMode":"code"},"time":1709633899747,"type":"auto","id":"58a21047-df26-4190-84df-85cf4c8dc274","name":"salmon-garage"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass Player{\n    hand .\n}","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":36.5905216598386,"y":-1.1841356229667674},"zoom":0.9576501846313477,"editorMode":"code"},"time":1709633839868,"type":"auto","id":"03f132dd-0c6e-4a45-bf97-34a30c8e40dc","name":"hallowed-quill"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side{\n    + placeSide() void\n}\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":36.5905216598386,"y":-1.1841356229667674},"zoom":0.9576501846313477,"editorMode":"code"},"time":1709633779738,"type":"auto","id":"8dd16292-4bc8-436b-b5a0-1647f31e66c4","name":"acrid-king"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Side\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":36.5905216598386,"y":-1.1841356229667674},"zoom":0.9576501846313477,"editorMode":"code"},"time":1709633719744,"type":"auto","id":"691154bf-bb22-4b47-9463-cfed9520a8b9","name":"some-daybreak"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nclass Back{\n    - permanentResource : List ResourceType\n}\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":36.5905216598386,"y":-1.1841356229667674},"zoom":0.9576501846313477,"editorMode":"code"},"time":1709633659741,"type":"auto","id":"40a8fabc-0152-4c65-b3f5-be4c09de4b4e","name":"bent-address"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- StarterCard\nCard *-->\"2\" Side\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":36.5905216598386,"y":-1.1841356229667674},"zoom":0.9576501846313477,"editorMode":"code"},"time":1709633599733,"type":"auto","id":"96e02c11-6c59-4a63-aa11-951e3140a0d7","name":"appetizing-refrigerator"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass ResourceCard{\n    - cardType : ResourceType\n}\n\nclass GoldenCard{\n    - cardType : ResourceType\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard <|-- \nCard *-->\"2\" Side\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":183.59050934622928,"y":17.81585363848224},"zoom":0.9576501846313477,"editorMode":"code"},"time":1709633539732,"type":"auto","id":"95464726-a4ed-43dc-a6ad-0139a2190f90","name":"rapid-garage"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - cardType : ResourceType\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"2\" Side\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":146.59050443172765,"y":8.815865850829539},"zoom":0.9576501846313477,"editorMode":"code"},"time":1709633479741,"type":"auto","id":"a57bd387-af73-48f9-ab87-f0ace7cb0c52","name":"unimportant-oil"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - cardType : ResourceType\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nclass StartingCard\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"2\" Side\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":146.59050443172765,"y":8.815865850829539},"zoom":0.9576501846313477,"editorMode":"code"},"time":1709633359738,"type":"auto","id":"a7b5707a-d59f-43b2-99bc-4e66b5818111","name":"powerful-egypt"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - cardType : ResourceType\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"2\" Side\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":146.59050443172765,"y":8.815865850829539},"zoom":0.9576501846313477,"editorMode":"code"},"time":1709633179738,"type":"auto","id":"50f9c31c-4c8b-400f-ba0a-7c3448a9909a","name":"happy-ocean"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - card\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"2\" Side\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":96.59050094527787,"y":8.815865850829539},"zoom":0.9576501846313477,"editorMode":"code"},"time":1709633119743,"type":"auto","id":"94c4a3f3-7c11-4e44-98dd-30cceaba5bc6","name":"acidic-wire"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    - cardTy\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"2\" Side\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":96.59050094527787,"y":8.815865850829539},"zoom":0.9576501846313477,"editorMode":"code"},"time":1709633059751,"type":"auto","id":"33b66009-e12b-4e48-9455-d69f479d450b","name":"abrasive-lamp"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"2\" Side\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n\n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nclass ObjectiveCard{\n    \n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":96.59050094527787,"y":8.815865850829539},"zoom":0.9576501914971303,"editorMode":"code"},"time":1709632999737,"type":"auto","id":"f12321a2-9c28-4f9f-8e76-0627ebedfc45","name":"freezing-waitress"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"2\" Side\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nclass CardCorner{\n    \n}\n\nCardCorner <|-- VisibleCorner\nCardCorner <|-- HiddenCorner\nVisibleCorner <|-- ResourceCorner\nVisibleCorner <|-- ObjectCorner\nVisibleCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":-73.80045470664348,"y":-156.5025356532022},"zoom":1.0534151792526245,"editorMode":"code"},"time":1709632939751,"type":"auto","id":"e516c230-72b7-4279-8e2b-0b4ff96292fa","name":"early-electrician"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"2\" Side\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ResourceCorner\nCardCorner <|-- ObjectCorner\nCardCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":175.45817608304796,"y":62.20276528981474},"zoom":0.7427438497543335,"editorMode":"code"},"time":1709632879728,"type":"auto","id":"1f4b8113-45e1-48ba-b3b1-8e867eacaee8","name":"salty-oxygen"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"2\" Side\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\nCardCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":175.45817608304796,"y":62.20276528981474},"zoom":0.7427438383214984,"editorMode":"code"},"time":1709632819739,"type":"auto","id":"99ff5ea7-9c4e-4bac-9775-b51c78bb55f1","name":"gorgeous-librarian"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"2\" Side\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\nCardCorner <|-- EmptyCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":66.70807720873351,"y":26.250377898093113},"zoom":0.8958500027656556,"editorMode":"code"},"time":1709632759737,"type":"auto","id":"342756a6-b9ba-46f9-babd-4503b3d1fb5e","name":"bashful-man"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"2\" Side\n\nSide <|-- Front\nSide <|-- Back\nSide *-->\"4\" CardCorner\n\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":66.70807720873351,"y":26.250377898093113},"zoom":0.8958500027656556,"editorMode":"code"},"time":1709632699744,"type":"auto","id":"60fa2644-33d3-4baa-85bc-a884cad844a9","name":"icy-magazine"},{"state":{"code":"classDiagram\n\nclass Card{\n    - currSide : Side\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"2\" Side\nSide <|-- Front\nSide <|-- Front\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":122.12771195317663,"y":71.486318992241},"zoom":0.6264786720275879,"editorMode":"code"},"time":1709632639734,"type":"auto","id":"1bcc02ea-3e3e-48a3-9b93-f6f8f910cf05","name":"stocky-salesclerk"},{"state":{"code":"classDiagram\n\nclass Card{\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"2\" Side\nSide\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":122.12771195317663,"y":71.486318992241},"zoom":0.6264786720275879,"editorMode":"code"},"time":1709632579742,"type":"auto","id":"5043f448-426a-4554-82db-410f6534c79b","name":"acidic-notebook"},{"state":{"code":"classDiagram\n\nclass Card{\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"4\" CardCorner\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":122.12771195317663,"y":71.486318992241},"zoom":0.6264786720275879,"editorMode":"code"},"time":1709632519734,"type":"auto","id":"10478445-3dad-43e3-85f8-9a2ad40b1472","name":"eager-actor"},{"state":{"code":"classDiagram\n\nclass PlaceableCard{\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nPlaceableCard <|-- ResourceCard\nPlaceableCard <|-- GoldenCard\nPlaceableCard *-->\"4\" CardCorner\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":122.12771195317663,"y":71.486318992241},"zoom":0.6264786720275879,"editorMode":"code"},"time":1709632459744,"type":"auto","id":"c454cd29-45c7-4df7-b692-ad5023623145","name":"gentle-leather"},{"state":{"code":"classDiagram\n\nclass Card{\n    + toString() String\n    + place(x: int, y: int) void\n}\n\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"4\" CardCorner\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":122.12771195317663,"y":71.486318992241},"zoom":0.6264786720275879,"editorMode":"code"},"time":1709632279736,"type":"auto","id":"81f7e1ef-e874-4bb4-b040-443d40da4cc7","name":"moldy-appointment"},{"state":{"code":"classDiagram\n\nclass Card{\n    + toString() String\n    + place(x: int, y: int) void\n}\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"4\" CardCorner\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":122.12771195317663,"y":71.486318992241},"zoom":0.6264786720275879,"editorMode":"code"},"time":1709632159754,"type":"auto","id":"d9340e72-ef88-4076-a44f-bd64c9113cb3","name":"lazy-rain"},{"state":{"code":"classDiagram\n\nclass Card{\n    + toString() String\n    + place(int x, int y) void\n}\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"4\" CardCorner\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":122.12771195317663,"y":71.486318992241},"zoom":0.6264786720275879,"editorMode":"code"},"time":1709632099743,"type":"auto","id":"306e1735-dcbf-479b-bb5c-461750a4a626","name":"itchy-toddler"},{"state":{"code":"classDiagram\n\nclass Card{\n    + toString() String\n}\nCard <|-- ResourceCard\nCard <|-- GoldenCard\nCard *-->\"4\" CardCorner\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":122.12771195317663,"y":71.486318992241},"zoom":0.6264786720275879,"editorMode":"code"},"time":1709632039743,"type":"auto","id":"e31d3c50-939e-446d-b862-c54d1edaf27e","name":"faithful-painting"},{"state":{"code":"classDiagram\n\nclass Card{\n    + toString() String\n}\nCard <|-- ResourceCard\nCard <|-- ObjectiveCard\nCard *-->\"4\" CardCorner\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":71.93800103505502,"y":42.88884793471794},"zoom":0.7513148680743575,"editorMode":"code"},"time":1709631979738,"type":"auto","id":"ee90e01d-dc64-4580-9613-74b0be27dbb6","name":"tight-nest"},{"state":{"code":"classDiagram\n\nclass Card{\n    + toString() String\n}\nCard <|-- ResourceCard\nCard <|-- ObjectiveCard\nCard *--> CardCorner\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":112.00001847043215,"y":25.86906110590457},"zoom":1,"editorMode":"code"},"time":1709631920549,"type":"auto","id":"00e444d8-c996-4522-99f0-42a132cfb732","name":"callous-machine"},{"state":{"code":"classDiagram\n\nclass Card{\n    + toString() String\n}\nCard <|-- ResourceCard\nCard <|-- ObjectiveCard\nCard --\\* CardCorner\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true,"pan":{"x":112.00001847043215,"y":25.86906110590457},"zoom":1,"editorMode":"code"},"time":1709631859736,"type":"auto","id":"48833b40-00a5-44d4-be42-91a05a917df3","name":"tasty-noon"},{"state":{"code":"classDiagram\n\nclass Card{\n    + toString() String\n}\nCard <|-- ResourceCard\nCard <|-- ObjectiveCard\nCard <-- CardCorner\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false,"panZoom":true},"time":1709631799748,"type":"auto","id":"cd755578-6bea-4924-8a05-b4ea531e88f9","name":"fresh-architect"},{"state":{"code":"classDiagram\n\nclass Card{\n    + toString() String\n}\nCard <|-- ResourceCard\nCard <|-- ObjectiveCard\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false},"time":1709631739746,"type":"auto","id":"189c5b66-7f13-4960-bb2f-815141decd38","name":"bored-church"},{"state":{"code":"classDiagram\n\nclass Card\nCard <|-- ResourceCard\nCard <|-- ObjectiveCard\nCard : toString()\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n\nclass ResourceType{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass ObjectType{\n    <<enumeration>>\n    QUILL\n    INKWELL\n    MANUSCRIPT\n}\n\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false},"time":1709631679732,"type":"auto","id":"1330e9b2-9dce-4840-bdd4-920bbf21a766","name":"victorious-zoo"},{"state":{"code":"classDiagram\nCard <|-- ResourceCard\nCard <|-- ObjectiveCard\nCard : toString()\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n\nclass Resource{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nclass Object{\n    <<enumeration>>\n    ANIMAL\n    PLANT\n    FUNGI\n    INSECT\n}\n\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false},"time":1709631619745,"type":"auto","id":"09ed792b-8819-4b92-9fd6-79281b9ad2bf","name":"plain-jordan"},{"state":{"code":"classDiagram\nCard <|-- ResourceCard\nCard <|-- ObjectiveCard\nCard : toString()\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n\nclass Resource{\n    <<enumeration>>\n    FUNGI\n    PLANT\n    ANIMAL\n    INSECT\n}\n\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false},"time":1709631559732,"type":"auto","id":"473c2ee9-46c9-4f87-9d94-ce329d5fb768","name":"abundant-exabyte"},{"state":{"code":"classDiagram\nCard <|-- ResourceCard\nCard <|-- ObjectiveCard\nCard : toString()\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\nclass Color{\n    <<enumeration>>\n    RED\n    BLUE\n    GREEN\n    WHITE\n    BLACK\n}\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false},"time":1709631499738,"type":"auto","id":"85539a52-8743-4e92-bf17-1ac141d632f8","name":"appalling-egg"},{"state":{"code":"classDiagram\nCard <|-- ResourceCard\nCard <|-- ObjectiveCard\nCard : toString()\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n<<Enumeration>>Resource : Mushroom\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false},"time":1709631439745,"type":"auto","id":"8d851fc3-cd45-4c4f-89db-c2a03ca62566","name":"some-jewellery"},{"state":{"code":"classDiagram\nCard <|-- ResourceCard\nCard <|-- ObjectiveCard\nCard : toString()\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false},"time":1709631380546,"type":"auto","id":"e81b0eca-eef7-4b5a-8686-79fbb5d3a982","name":"salty-wolf"},{"state":{"code":"classDiagram\nCard <|-- ResourceCard\nCard <|-- ObjectiveCard\nCard : toString()\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\n(enum)Object : objType\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false},"time":1709631319731,"type":"auto","id":"036411a3-b25b-48db-a13c-29302920f7d2","name":"savory-terabyte"},{"state":{"code":"classDiagram\nCard <|-- ResourceCard\nCard <|-- ObjectiveCard\nCard : toString()\nCardCorner <|-- ResourceCorner\nCardCorner <|-- HiddenCorner\nCardCorner <|-- ObjectCorner\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false},"time":1709631259746,"type":"auto","id":"137fbfda-3e18-4cf8-9a8a-e77eb1cfc02b","name":"old-pharmacist"},{"state":{"code":"classDiagram\nCard <|-- ResourceCard\nCard <|-- ObjectiveCard\nCard : toString()\nCardCorner\nCardCorner : getType()\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false},"time":1709631199748,"type":"auto","id":"9ea3a430-f229-45db-98c7-bbf7f4226ffd","name":"delicious-air"},{"state":{"code":"classDiagram\nCard <|-- ResourceCard\nCard <|-- ObjectiveCard\nCard : toString()\nCardCorner\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false},"time":1709631139739,"type":"auto","id":"10247963-9c85-465a-b5d6-3d192f299622","name":"billowy-china"},{"state":{"code":"classDiagram\nCard <|-- ResourceCard\nCard <\\-- ObjectiveCard\nCard : toString()\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false},"time":1709631079737,"type":"auto","id":"97243ad3-eb7b-4667-8404-2bcbae953c9e","name":"poor-dress"},{"state":{"code":"classDiagram\nCard <-- ResourceCard\nCard <-- ObjectiveCard\nCard : toString()\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false},"time":1709631019751,"type":"auto","id":"a6f1b48c-c002-4c7a-87a8-e595ff6ff74d","name":"shaggy-electrician"},{"state":{"code":"classDiagram\nCard <|-- AveryLongClass\nCard : toString()\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false},"time":1709630959744,"type":"auto","id":"28c3c1a0-c13c-4a48-8c8d-e0e47edab60c","name":"creamy-waitress"},{"state":{"code":"classDiagram\nCard <|-- AveryLongClass : Cool\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label","mermaid":"{\n  \"theme\": \"dark\"\n}","autoSync":true,"updateDiagram":false},"time":1709630899730,"type":"auto","id":"f7378539-c47b-433b-940b-034cc6b14dc8","name":"mango-bear"}]